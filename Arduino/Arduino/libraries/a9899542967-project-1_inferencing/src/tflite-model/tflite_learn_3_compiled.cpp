/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 24.11.2024 00:38:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 102048;
#else
constexpr int kTensorArenaSize = 101024;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,60,60,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data3[5] = { 41993, -74172, -69810, -51083, -53256, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<5, float> quant3_scale = { 5, { 7.7052172855474055e-05, 7.630027539562434e-05, 8.1086276622954756e-05, 8.3819308201782405e-05, 7.6703079685103148e-05, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[5*1*1*32] = { 
  /* [0][0][][] */ 69,96,-18,46,-45,79,26,21,70,43,-57,-13,-53,101,31,127,-34,-71,-4,-59,12,35,-84,-114,22,-40,101,-111,23,76,19,-28, 
  /* [1][0][][] */ 54,85,114,98,57,125,8,-30,-50,-63,80,18,-84,67,-57,23,30,33,-15,43,-70,105,82,-11,11,87,28,71,48,-96,47,-127, 
  /* [2][0][][] */ -22,-59,-18,-71,15,75,127,-53,114,98,-41,111,97,122,-75,-43,15,12,60,30,-19,-63,86,-65,86,69,47,9,-56,-27,82,120, 
  /* [3][0][][] */ 55,-65,17,-29,123,-17,-28,-77,61,-47,-33,-76,3,-29,47,-51,-88,-38,-6,58,6,52,-43,44,64,127,19,-31,41,88,93,-78, 
  /* [4][0][][] */ -33,-76,97,-54,8,59,-58,-84,102,75,79,-101,40,-78,106,6,90,-67,-60,109,24,-47,-23,127,-6,-51,-70,-99,-99,126,-19,-85, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant4_scale = { 5, { 0.0032974379137158394, 0.0032652604859322309, 0.0034700767137110233, 0.0035870366264134645, 0.0032824983354657888, } };
const TfArray<5, int> quant4_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[32] = { -488, -856, 1732, 169, 2091, 1710, -1522, -1513, 1888, -892, -489, -1367, 59, -2200, 1647, -1315, -2665, -1287, -812, 2241, -1482, 1230, -869, 1907, 2399, 1894, -1546, -996, -686, 2050, -1125, -1446, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 3.166779424645938e-05, 4.153163536102511e-05, 4.158641240792349e-05, 3.9458991523133591e-05, 4.1145103750750422e-05, 3.7286197766661644e-05, 3.6245291994418949e-05, 3.625996396294795e-05, 4.2809879232663661e-05, 3.397479304112494e-05, 3.8974088965915143e-05, 3.3491156500531361e-05, 3.7424124457174912e-05, 3.2932242902461439e-05, 4.0560909837950021e-05, 3.5547902371035889e-05, 3.7011424865340814e-05, 3.439707143115811e-05, 3.7052865081932396e-05, 3.6027657188242301e-05, 3.140446642646566e-05, 3.3698845072649419e-05, 3.3192558476002887e-05, 3.5339715395821258e-05, 4.1110961319645867e-05, 3.6172939871903509e-05, 3.4065724321408197e-05, 3.1906405638437718e-05, 3.2151012419490144e-05, 3.5450979339657351e-05, 3.381881833774969e-05, 3.6415571230463684e-05, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[32*1*1*48] = { 
  /* [0][0][][] */ -48,-62,97,-1,92,-12,-86,-117,63,-88,-107,-9,53,-4,-49,48,-58,-42,-54,-70,-64,-116,-3,103,-121,1,72,-41,127,-4,-28,-95,80,-65,-105,59,-124,-91,-77,23,72,-104,-113,97,52,-115,127,-27, 
  /* [1][0][][] */ -56,31,-68,-15,-38,65,24,-5,59,-90,-90,77,55,-34,9,48,127,-42,29,84,-39,-16,16,9,69,25,-43,83,9,30,75,-61,38,74,-16,9,32,38,-15,-46,-56,0,-33,-91,-22,23,17,-54, 
  /* [2][0][][] */ 45,53,-30,104,3,-74,65,99,-101,97,-33,118,61,17,81,-83,-41,5,31,65,-67,13,116,37,-59,58,115,-10,-59,41,89,95,-24,16,-50,-65,-43,86,100,5,-83,-47,35,19,-96,127,-37,-31, 
  /* [3][0][][] */ 70,2,29,-21,-55,46,-93,47,44,15,58,9,100,80,64,12,127,93,-31,10,125,-70,-52,-100,16,-83,-54,88,48,-57,88,19,-9,-28,0,-7,-75,-20,76,59,-11,-82,-80,-5,80,32,-5,-57, 
  /* [4][0][][] */ 55,111,26,78,6,-29,31,32,47,105,16,73,24,4,9,-56,-11,27,-43,39,96,-40,101,26,-53,-3,71,-30,-44,-5,-21,-17,75,127,36,-53,-7,21,-71,67,-14,-78,-28,-45,29,119,47,70, 
  /* [5][0][][] */ 51,-45,75,110,67,-127,-14,82,75,-92,-36,-27,-3,121,41,48,76,85,-75,120,44,77,46,4,-118,-39,14,-103,42,2,33,-61,-4,43,-32,-18,-71,-68,19,49,-86,-25,36,111,-67,23,27,-21, 
  /* [6][0][][] */ -1,-60,85,50,-95,-67,-16,41,-22,-87,-9,-99,61,32,87,-125,62,-17,-17,75,-89,-127,80,35,-37,-90,-28,-63,-41,-114,24,-89,-103,-126,-60,-114,-27,20,-116,56,61,34,3,-33,-114,78,-74,-61, 
  /* [7][0][][] */ 89,53,-52,-59,-83,108,-25,-23,104,-13,-100,-7,51,-101,23,59,79,-6,-12,85,37,11,-28,58,-16,101,8,46,-71,119,-37,13,-6,9,40,70,-117,62,-27,-27,71,-86,55,39,43,-19,112,-127, 
  /* [8][0][][] */ 24,57,-12,-40,73,9,-57,10,-5,59,44,103,0,-5,-46,-44,-43,102,-41,39,39,9,92,109,-127,77,68,49,-56,-2,-41,116,105,3,64,22,119,21,9,80,81,95,-59,-61,-12,3,-25,115, 
  /* [9][0][][] */ -10,-11,100,34,66,-115,-66,-127,26,38,-27,40,-44,-89,-112,-43,-5,-12,-109,-79,-9,85,-118,-113,92,-26,-24,7,-29,-77,-99,85,47,-11,14,-30,-87,3,-46,-59,33,-79,41,-104,61,2,-117,40, 
  /* [10][0][][] */ -77,73,65,-60,-15,56,70,30,35,17,13,-64,46,63,-42,7,-46,60,-90,-61,-25,21,45,-47,-10,29,-106,-127,-63,28,-83,-67,66,89,96,41,-49,-19,-33,14,-48,92,-106,-45,-96,-71,-30,-52, 
  /* [11][0][][] */ 89,-9,-33,83,96,33,37,10,98,72,-92,90,-22,-103,8,-79,-27,-122,43,20,10,54,4,-127,-69,-108,-43,56,63,-20,5,-40,-108,-88,32,26,-82,56,-49,-70,-45,89,-94,-14,-54,-75,-63,-110, 
  /* [12][0][][] */ -5,94,-31,15,110,-7,-41,52,-90,39,-41,22,-53,16,51,-52,-96,-31,-57,-43,33,-2,16,119,-98,-29,83,-121,74,-8,-55,127,-58,-49,-28,-7,1,-87,-39,37,95,60,-109,2,-47,-95,-75,78, 
  /* [13][0][][] */ 88,-93,76,65,61,119,65,32,62,-127,-5,-62,72,41,39,-74,-115,-104,-97,-1,38,-60,86,-77,-29,13,-29,6,-108,-84,50,5,7,73,-54,9,-117,-56,-5,38,-94,50,-83,-18,-56,-2,-4,-64, 
  /* [14][0][][] */ -33,-66,93,77,82,-32,-9,-72,-67,-25,53,88,-23,-45,-54,-62,-43,-26,21,39,-22,50,23,70,-127,-56,-3,24,-89,-112,-45,52,110,-6,-6,29,100,111,48,-83,11,-75,54,96,28,-76,37,-46, 
  /* [15][0][][] */ 4,-24,-41,52,74,-89,44,-103,47,-15,-80,-5,98,-14,-97,-111,127,-6,-93,10,43,2,50,90,122,69,21,78,14,74,46,-106,-10,-7,-72,-22,-78,88,88,-68,1,99,-62,-37,19,-85,-5,-93, 
  /* [16][0][][] */ -90,3,66,-74,41,80,-79,49,27,9,-127,32,-38,-77,-80,-43,79,35,29,61,104,36,-70,75,-69,42,-71,32,-100,-16,4,18,-89,68,50,20,-66,17,-78,-76,-17,-17,29,71,24,55,58,-47, 
  /* [17][0][][] */ 19,-120,14,61,-59,-118,-77,-112,32,-101,71,31,86,41,-127,31,57,35,90,94,-101,-30,-4,-66,68,55,-94,16,89,-39,-46,57,-44,-38,14,-11,-63,81,-97,-40,-108,-53,-33,-28,13,-5,126,-124, 
  /* [18][0][][] */ -89,100,87,-76,-14,-105,-98,-6,-13,51,-101,-47,6,16,47,-29,50,-27,67,-30,127,-49,6,-83,65,-72,-20,95,29,68,10,32,37,-26,-85,-105,-37,26,1,57,-34,-4,-60,-22,-68,9,58,2, 
  /* [19][0][][] */ 36,65,97,75,86,-87,93,118,81,-18,40,29,-89,69,-26,68,84,-57,112,84,-1,110,-12,41,29,-69,70,-61,-82,-127,-20,74,117,-35,66,31,46,-39,-21,-54,64,-84,-41,47,-94,68,62,-43, 
  /* [20][0][][] */ -23,71,57,82,-104,77,5,51,4,-8,-107,-14,-31,71,28,-78,-47,-55,-76,-44,30,-65,-99,-74,65,-60,-124,34,24,15,-63,106,91,39,-22,39,25,-51,-9,-120,-105,-41,-112,-127,-47,-83,-77,91, 
  /* [21][0][][] */ 113,56,82,-89,79,-59,85,-2,20,-26,-35,48,25,61,-48,-108,-90,-15,26,-32,84,-35,87,-112,93,-92,-19,114,24,10,16,-38,6,13,-95,-86,127,121,-101,-9,4,-16,50,-22,-63,-37,-39,121, 
  /* [22][0][][] */ 20,-54,-80,-108,88,-65,103,44,-94,87,-74,-113,103,-112,-119,-85,29,72,-121,-70,76,-85,19,21,93,-4,-127,101,-67,-85,-71,-121,37,51,6,0,-3,-20,-72,-116,0,-17,-11,90,52,-127,92,-35, 
  /* [23][0][][] */ 70,-66,26,79,110,-127,0,-72,34,-60,73,94,3,-74,36,-32,69,-7,-95,115,97,-51,125,-11,-63,-24,105,4,58,17,89,-14,-7,58,41,56,116,8,-83,12,-86,13,35,-76,-102,-67,73,54, 
  /* [24][0][][] */ -41,-6,-54,-23,-37,-96,-53,-37,55,127,87,73,111,85,-9,-100,-35,71,39,-9,110,-29,-9,-9,31,3,96,62,80,39,39,-16,34,38,77,53,-7,-43,81,12,-30,-87,116,38,38,8,67,95, 
  /* [25][0][][] */ -63,-28,-57,12,96,-56,-88,68,49,-77,-10,46,95,23,-88,-14,-48,83,39,-102,85,104,16,-77,29,-34,-60,65,77,-76,65,127,118,-84,65,95,116,-25,13,7,-47,68,-70,27,119,76,96,62, 
  /* [26][0][][] */ 38,-116,-38,-33,-114,37,-20,-32,-76,-127,121,64,-89,-65,-6,-31,125,10,-87,-83,-2,50,77,-6,69,46,-8,38,-2,35,-107,-19,-50,-77,-116,-116,-83,69,-65,86,-113,82,37,11,-49,51,-34,80, 
  /* [27][0][][] */ 31,12,-50,-92,-123,-61,-57,-27,32,91,24,-124,-22,47,72,-28,76,-29,79,-75,-83,-2,-41,-22,-112,38,-122,8,70,44,-46,-22,54,74,-81,-100,-105,-81,-127,86,-112,20,18,7,88,14,66,94, 
  /* [28][0][][] */ 83,-16,78,34,-121,-51,-57,-86,-32,-122,94,65,-36,-99,-3,118,127,105,-87,66,-36,16,-122,-86,-74,115,-89,-18,-30,-53,-6,-29,-112,5,76,67,11,-114,-47,67,120,83,-107,56,-70,14,52,38, 
  /* [29][0][][] */ 68,65,79,-20,-56,-3,-115,35,74,12,-67,-57,98,-66,-21,-79,-95,126,38,-35,-55,0,84,27,-74,2,-5,-42,-108,-25,127,24,83,17,-45,-19,21,119,22,97,65,110,-8,111,2,124,-53,11, 
  /* [30][0][][] */ 9,-64,-75,36,-109,16,-73,-20,95,-31,-19,-58,-114,2,40,11,-10,18,71,-107,29,-113,-124,14,-123,12,-80,97,-13,-123,-108,-9,-90,-68,-127,-68,-2,-34,-12,25,72,-74,-27,82,84,-57,89,44, 
  /* [31][0][][] */ 58,-103,18,75,27,48,-65,-110,-37,-31,-81,-98,77,-127,-60,85,-28,-100,14,28,38,15,-46,78,71,-115,13,27,-78,-78,25,80,-3,2,-102,-22,71,-41,-82,-109,39,-81,-44,13,-2,-60,-10,3, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0022109844721853733, 0.0028996588662266731, 0.0029034833423793316, 0.0027549508959054947, 0.0028726719319820404, 0.0026032505556941032, 0.0025305766612291336, 0.002531600883230567, 0.0029889033176004887, 0.0023720546159893274, 0.0027210959233343601, 0.0023382881190627813, 0.0026128804311156273, 0.0022992659360170364, 0.0028318846598267555, 0.0024818861857056618, 0.0025840664748102427, 0.002401537261903286, 0.0025869598612189293, 0.0025153816677629948, 0.0021925994660705328, 0.0023527885787189007, 0.0023174404632300138, 0.002467351034283638, 0.0028702882118523121, 0.0025255251675844193, 0.0023784034419804811, 0.0022276437375694513, 0.0022447218652814627, 0.0024751191958785057, 0.0023611648939549923, 0.0025424649938941002, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[48] = { 1971, -1575, 7987, 3073, 7091, 2, 2986, 6581, -3882, -1730, -1562, 15140, 5934, 4748, 10036, -6262, -4850, 15371, 5091, 6405, 8322, 24903, 26653, 1640, -1958, 2735, -89, -1905, 2594, 3414, 7230, 22289, -904, 64, 19655, 7029, 13388, 4580, 2396, -1731, 4506, -4131, 18378, -1036, 764, 3538, -3129, 6788, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00015018964768387377, 0.000166389683727175, 8.7412794528063387e-05, 0.00016721255087759346, 8.0461613833904266e-05, 0.00018549695960246027, 0.00010928563278866932, 0.00011811769218184054, 0.00012809451436623931, 0.00016009435057640076, 0.0001550520391901955, 5.5634478485444561e-05, 0.00010564576223259792, 0.00012139214231865481, 7.8776691225357354e-05, 9.5999079348985106e-05, 0.00012940198939759284, 6.8762979935854673e-05, 0.0001196209923364222, 0.00011461754911579192, 9.3461640062741935e-05, 4.0245293348561972e-05, 3.8040547224227339e-05, 0.00016881122428458184, 0.0001496650802437216, 0.00010034550359705463, 0.0001676620013313368, 0.000125393460621126, 0.0001577019429532811, 0.00013733583909925073, 8.5455954831559211e-05, 4.3393571104388684e-05, 0.00014132444630376995, 0.00017322704661637545, 4.9911974201677367e-05, 7.4367599154356867e-05, 6.9866910052951425e-05, 0.00012094962585251778, 0.00014133764489088207, 0.00019846529175993055, 0.00011032080510631204, 0.00013052888971287757, 4.3528594687813893e-05, 0.00019178251386620104, 0.00015371428162325174, 0.0001587954320712015, 0.00013278538244776428, 0.00012137807061662897, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -9,10,127,-12,4,52,-8,-75, 
  /* [1][0][][] */ 70,-61,40,-63,-9,-60,127,6, 
  /* [2][0][][] */ 49,65,91,-82,-87,14,127,-29, 
  /* [3][0][][] */ -5,16,4,-24,35,-68,127,11, 
  /* [4][0][][] */ 127,-75,-91,-62,-112,-91,-9,70, 
  /* [5][0][][] */ 23,70,127,3,29,-44,23,-36, 
  /* [6][0][][] */ 121,114,-26,127,-92,20,33,90, 
  /* [7][0][][] */ -22,-20,-13,18,35,-127,-100,-40, 
  /* [8][0][][] */ 99,60,-34,82,-51,36,-127,-46, 
  /* [9][0][][] */ 127,-37,-52,39,-2,-50,35,-96, 
  /* [10][0][][] */ 64,23,-19,21,-28,127,47,-2, 
  /* [11][0][][] */ 86,-44,-29,-127,93,-70,-35,53, 
  /* [12][0][][] */ -59,88,71,-33,27,71,-77,127, 
  /* [13][0][][] */ 127,6,-80,19,26,-75,28,-85, 
  /* [14][0][][] */ 115,40,12,-9,-127,26,-91,-4, 
  /* [15][0][][] */ 35,18,-82,-47,-117,-39,95,127, 
  /* [16][0][][] */ 7,-47,127,-2,126,-54,-74,-33, 
  /* [17][0][][] */ 10,-27,64,-22,127,-53,-57,-13, 
  /* [18][0][][] */ 101,-54,127,39,-20,32,-39,-2, 
  /* [19][0][][] */ 49,30,54,-65,-28,-127,13,-35, 
  /* [20][0][][] */ 37,-53,51,127,30,-93,-81,114, 
  /* [21][0][][] */ 72,-14,-61,-127,51,-76,4,108, 
  /* [22][0][][] */ -33,-116,-72,-35,78,-10,127,-78, 
  /* [23][0][][] */ -18,10,18,-51,-97,-127,10,-29, 
  /* [24][0][][] */ 127,-8,44,32,-6,-25,-85,81, 
  /* [25][0][][] */ 87,42,-9,-69,-39,-33,-27,127, 
  /* [26][0][][] */ -79,-39,4,-127,98,-9,-25,-80, 
  /* [27][0][][] */ 127,125,-5,-66,21,66,25,12, 
  /* [28][0][][] */ 40,98,2,16,21,-38,-20,127, 
  /* [29][0][][] */ 117,5,98,88,29,-42,-127,50, 
  /* [30][0][][] */ 117,-127,-81,124,83,14,-85,95, 
  /* [31][0][][] */ 83,-100,4,35,-84,-127,-110,55, 
  /* [32][0][][] */ -104,-90,8,-127,94,0,-18,-94, 
  /* [33][0][][] */ 20,14,50,48,45,-89,127,56, 
  /* [34][0][][] */ -101,44,72,-126,127,-110,-40,100, 
  /* [35][0][][] */ -82,25,38,127,1,111,17,-7, 
  /* [36][0][][] */ 74,21,-42,-127,43,2,34,32, 
  /* [37][0][][] */ 40,27,-7,-1,-52,127,51,45, 
  /* [38][0][][] */ -20,-67,31,121,3,44,1,127, 
  /* [39][0][][] */ 14,-8,-127,36,3,-27,-21,56, 
  /* [40][0][][] */ 61,21,-69,1,-51,35,-58,127, 
  /* [41][0][][] */ 38,-1,22,-40,-90,-127,-14,7, 
  /* [42][0][][] */ -77,79,-73,127,-20,81,-46,-115, 
  /* [43][0][][] */ -10,2,-11,-127,-22,2,-21,-61, 
  /* [44][0][][] */ 53,19,21,63,35,127,-60,46, 
  /* [45][0][][] */ -2,60,-27,10,127,-27,-64,-11, 
  /* [46][0][][] */ 57,-99,-13,127,104,32,-39,87, 
  /* [47][0][][] */ -29,-94,28,-17,127,27,63,11, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0027892657089978456, 0.0030901266727596521, 0.0016233975766226649, 0.0031054087448865175, 0.0014943028800189495, 0.0034449798986315727, 0.0020296117290854454, 0.0021936374250799417, 0.0023789233528077602, 0.0029732121620327234, 0.002879568375647068, 0.001033222652040422, 0.0019620135426521301, 0.0022544492967426777, 0.0014630111400038004, 0.0017828588606789708, 0.0024032052606344223, 0.001277040340937674, 0.0022215561475604773, 0.0021286341361701488, 0.0017357345204800367, 0.0007474204758182168, 0.00070647476240992546, 0.0031350988429039717, 0.0027795238420367241, 0.0018635790329426527, 0.0031137557234615088, 0.0023287604562938213, 0.0029287813231348991, 0.0025505495723336935, 0.001587055972777307, 0.0008058891398832202, 0.0026246246416121721, 0.0032171076163649559, 0.00092694646446034312, 0.0013811271637678146, 0.0012975420104339719, 0.0022462310735136271, 0.0026248698122799397, 0.003685822943225503, 0.0020488365553319454, 0.0024241337087005377, 0.00080839672591537237, 0.0035617130342870951, 0.0028547239489853382, 0.002949089277535677, 0.0024660401977598667, 0.002254188060760498, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[8] = { -11041, -5075, -644, -13203, 3269, -3252, 6497, 11130, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 0.00014388385170605034, 0.00020895495254080743, 9.8419695859774947e-05, 0.00013068605039734393, 0.00010763037425931543, 0.00012441747821867466, 0.00010999235382769257, 0.00012822494318243116, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[8*1*1*48] = { 
  /* [0][0][][] */ 127,-36,20,-34,12,65,-2,30,123,-91,49,1,-51,80,20,-52,13,-27,-23,-26,9,-56,9,-11,-53,-23,-39,-44,-23,72,-19,27,40,-42,16,-31,67,-69,-54,-7,21,-34,-74,7,68,-23,55,-47, 
  /* [1][0][][] */ 58,5,-19,66,45,57,17,25,64,-68,6,12,50,28,-34,-5,-46,-33,-75,0,9,-46,51,84,-5,-53,-11,46,-33,61,-43,127,-19,53,-10,-16,-46,-10,1,-18,-38,-15,-29,45,24,-2,15,-73, 
  /* [2][0][][] */ -32,-34,-91,39,-93,-20,-23,35,-110,-82,-82,-29,-35,60,-111,-4,67,-76,24,-17,127,87,-14,13,44,94,14,-83,-56,7,71,-9,-22,47,77,-60,71,-13,91,95,-42,87,46,1,-87,69,-37,73, 
  /* [3][0][][] */ 8,-11,-19,38,-15,-5,1,53,75,109,-127,-22,33,-21,-25,94,-71,-8,-17,55,-24,6,75,19,9,23,-63,55,-49,38,-27,-15,18,36,49,27,61,2,52,13,-51,103,79,22,32,-8,-25,-33, 
  /* [4][0][][] */ -44,-82,37,-58,15,90,-63,-60,12,-64,61,25,-78,-41,-18,13,73,11,-15,34,-72,-26,127,-35,-94,-29,-6,0,37,-41,-30,57,-52,30,-40,41,-53,30,-13,4,-52,40,-49,33,122,47,-27,-9, 
  /* [5][0][][] */ -58,-54,55,-127,-8,10,-22,-41,-11,79,-44,83,-74,13,39,20,69,68,65,25,27,0,-21,-78,51,-66,-5,-44,-21,-21,46,-64,-11,-45,64,-5,-16,44,42,78,104,23,17,-33,-20,-14,-21,41, 
  /* [6][0][][] */ -50,-49,27,42,-58,-59,9,-55,-89,15,-109,48,30,-48,39,31,-37,25,5,127,-14,-7,66,47,-79,-17,50,24,-1,-15,-15,-51,-33,66,72,-80,-27,79,54,-13,-59,66,75,-58,-22,-32,-18,4, 
  /* [7][0][][] */ 18,-6,21,-17,7,27,-48,-47,-127,-26,97,13,4,-32,20,-9,20,41,13,-32,-58,19,-5,-43,47,7,-36,7,3,-36,-33,-54,-101,-60,-39,-6,53,-36,-23,-10,53,-2,41,-25,18,-50,27,20, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant10_scale = { 8, { 0.0061150635592639446, 0.0088805854320526123, 0.0041828369721770287, 0.0055541573092341423, 0.0045742909424006939, 0.0052877427078783512, 0.0046746749430894852, 0.0054495600052177906, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[48] = { -6434, -1955, 13720, 1239, 44, -6726, -3175, 15305, 12361, -3435, -8683, -7782, -101, 14816, 16679, -497, 4287, -7623, 4106, -2666, 18843, -4751, -2926, -2098, 3382, -10231, -210, -1634, 16317, -29917, -5311, 1546, -5136, -839, -3502, -2213, 10531, -5723, -2349, -16766, -9315, 9170, -8184, -3583, 4361, -9072, 11414, -4526, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00015836725651752204, 0.00013878480240236968, 7.8545155702158809e-05, 8.3009799709543586e-05, 0.00016611686442047358, 0.00010180372191825882, 0.00019756513938773423, 0.00010741436562966555, 0.00010346822091378272, 0.00038927170680835843, 0.00022444623755291104, 6.3597646658308804e-05, 0.00019931350834667683, 9.8221556982025504e-05, 7.5140269473195076e-05, 0.0001440276246285066, 0.0001113882171921432, 9.6070041763596237e-05, 0.00011672390974126756, 0.00020513198978733271, 7.6497388363350183e-05, 0.00014850457955617458, 0.00015558276209048927, 0.00014176213881000876, 0.00010970679431920871, 0.00014022664981894195, 0.00018490642833057791, 0.00028696615481749177, 8.1827791291289032e-05, 8.251136023318395e-05, 0.00012568016245495528, 0.00014514519716612995, 7.7884971688035876e-05, 0.00025168931460939348, 8.4534636698663235e-05, 0.00011908026499440894, 0.00011729358084267005, 8.5846870206296444e-05, 7.3436247475910932e-05, 6.939443846931681e-05, 0.00019017455633729696, 9.3551272584591061e-05, 0.00014425230619963259, 9.7902571724262089e-05, 0.00012102384789614007, 6.6468914155848324e-05, 8.4891005826648325e-05, 0.00011897723015863448, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[1*3*3*48] = { 
  /* [0][0][][] */ 99,60,-11,57,-8,-17,-63,-4,31,-77,41,19,7,-87,-34,29,124,27,-62,7,63,16,-29,-13,87,66,24,-12,-66,41,-17,-63,127,2,115,36,-14,11,98,54,-49,68,-121,-39,32,-68,-29,19, 127,127,-72,119,16,58,-57,-127,46,39,127,35,-27,-5,-21,-4,-47,127,-82,20,79,127,36,-35,31,27,11,127,-127,82,-17,-127,-12,-42,41,73,-57,127,127,54,-99,-89,68,5,-4,36,-127,71, 70,40,-4,23,2,-7,-38,5,22,-101,40,-7,0,-72,-16,-17,121,-22,-44,-6,61,12,-21,30,56,118,22,-7,-42,46,-4,-41,110,10,114,22,-1,5,99,4,-25,64,49,80,25,100,25,-4, 
  /* [0][1][][] */ -12,-26,-127,96,21,35,54,-26,37,82,-33,127,127,10,-32,-70,-25,76,81,-4,-119,16,33,-96,48,45,23,1,-61,81,29,38,69,127,54,34,-53,15,-13,114,101,-11,93,-103,14,-89,-11,127, 62,-55,-13,-127,94,15,127,-53,-127,122,13,81,-105,127,127,-9,-127,87,32,127,52,-17,127,-3,-127,127,31,-70,-125,2,-127,89,70,-106,69,121,127,77,21,127,127,-105,0,9,102,-40,18,28, 1,-23,-107,47,-20,127,45,-14,29,57,-26,56,-16,22,-40,-8,-80,70,127,-24,-127,9,-47,127,24,2,34,20,10,56,53,28,7,-4,-11,-127,-22,-17,25,42,62,50,-16,127,-12,127,-25,75, 
  /* [0][2][][] */ -19,-30,-18,18,-21,2,-6,-9,29,-25,13,18,26,-70,-51,24,124,2,27,10,-74,23,4,5,43,2,-3,-9,-32,51,34,-3,15,13,127,-9,-3,50,87,54,20,90,127,-11,-48,-125,-11,-30, -122,-5,-72,57,-127,-3,-49,-6,22,127,-61,65,-29,-19,-27,127,-76,32,-86,-22,-47,19,4,-35,-6,103,-127,-34,-112,127,62,24,27,-31,30,15,-14,33,-52,48,-45,-127,-100,-23,-127,70,-104,57, -19,-30,-24,9,5,-6,-7,-10,25,-43,1,-19,-19,-56,-38,13,126,-50,82,20,-59,-6,9,33,36,9,0,-18,-22,43,40,6,44,1,72,30,-3,30,92,1,28,78,-67,60,-39,99,-9,-66, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.010616863146424294, 0.0093040652573108673, 0.005265628919005394, 0.0055649364367127419, 0.011136393062770367, 0.0068248719908297062, 0.013244670815765858, 0.0072010066360235214, 0.0069364588707685471, 0.026096584275364876, 0.015046766027808189, 0.0042635551653802395, 0.01336188055574894, 0.0065847253426909447, 0.0050373668782413006, 0.0096555417403578758, 0.0074674119241535664, 0.0064404886215925217, 0.007825113832950592, 0.01375194825232029, 0.0051283473148941994, 0.009955674409866333, 0.010430192574858665, 0.0095036644488573074, 0.0073546897619962692, 0.0094007262960076332, 0.012396036647260189, 0.019238071516156197, 0.0054856953211128712, 0.0055315215140581131, 0.0084255365654826164, 0.0097304629161953926, 0.0052213706076145172, 0.016873128712177277, 0.0056671607308089733, 0.0079830829054117203, 0.007863304577767849, 0.0057551320642232895, 0.0049231303855776787, 0.0046521690674126148, 0.012749209068715572, 0.0062716314569115639, 0.009670604020357132, 0.0065633407793939114, 0.0081133795902132988, 0.0044560437090694904, 0.0056910514831542969, 0.0079761752858757973, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 3 };
const ALIGN(16) int32_t tensor_data13[48] = { 31482, 11530, 2660, 1090, 7089, 2656, 11815, 6643, 2489, -10997, 33599, 2057, 8056, 2660, 6461, 2830, 10841, -574, 17017, 1277, 5891, -1088, 3549, 10564, 2171, -4537, 3085, 21792, 1055, 13114, 1474, 25072, 587, 8094, -1312, -2298, 2889, 3326, -62, 3110, 19228, -2457, 15762, 4345, 3095, 4592, 6455, -2896, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 3.2511110475752503e-05, 7.6484982855618e-05, 0.00012248138955328614, 0.00017003655375447124, 0.0001130998061853461, 0.00016738766862545162, 7.1225273131858557e-05, 0.00011477398220449686, 0.00016388276708312333, 6.8476962042041123e-05, 3.2468902645632625e-05, 0.00013512223085854203, 8.916761726140976e-05, 0.00014411096344701946, 0.00010151032620342448, 0.00011059919779654592, 7.7340126154012978e-05, 0.00019542571681085974, 5.0529157306300476e-05, 9.8644886747933924e-05, 0.00011280585749773309, 0.00013254483928903937, 0.00012984906788915396, 6.6440647060517222e-05, 0.00014921606634743512, 0.00013080069038551301, 0.00013352514361031353, 4.5113145461073145e-05, 0.00015384462312795222, 6.2543331296183169e-05, 0.00020258362928871065, 4.0355655073653907e-05, 0.00013813050463795662, 9.8990822152700275e-05, 0.00011900557001354173, 0.00017930477042682469, 0.00016875143046490848, 0.00011311427078908309, 0.00016997159400489181, 0.00010973573080264032, 4.7123761760303751e-05, 8.8029890321195126e-05, 5.6065109674818814e-05, 8.587733464082703e-05, 9.0706722403410822e-05, 0.00016990327276289463, 8.80113584571518e-05, 0.00011427564459154382, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -127,34,-29,-32,64,28,19,-50, 
  /* [1][0][][] */ -7,-38,-36,-3,-56,-127,25,4, 
  /* [2][0][][] */ -75,67,1,-57,-66,27,-48,127, 
  /* [3][0][][] */ 57,59,57,-4,-49,-127,54,-10, 
  /* [4][0][][] */ 0,31,-109,28,-127,63,41,23, 
  /* [5][0][][] */ -30,36,24,-32,-62,-127,-59,-3, 
  /* [6][0][][] */ -68,127,118,-32,-82,-40,11,-34, 
  /* [7][0][][] */ -3,-13,22,68,12,-127,4,47, 
  /* [8][0][][] */ 127,35,-88,77,-70,-47,-95,-2, 
  /* [9][0][][] */ 94,-45,-65,-81,11,-21,-49,127, 
  /* [10][0][][] */ -73,21,22,127,17,87,16,-106, 
  /* [11][0][][] */ 37,27,47,-12,10,115,127,77, 
  /* [12][0][][] */ -55,-60,-47,-55,127,-14,-17,28, 
  /* [13][0][][] */ -23,-16,2,36,10,-127,34,48, 
  /* [14][0][][] */ 103,115,127,30,91,-121,-98,-25, 
  /* [15][0][][] */ -57,65,127,55,-15,4,49,-78, 
  /* [16][0][][] */ -127,-66,83,-74,106,-20,-68,30, 
  /* [17][0][][] */ 30,-52,-50,9,-9,127,-25,35, 
  /* [18][0][][] */ -16,127,79,-60,-92,43,109,-108, 
  /* [19][0][][] */ 24,108,76,127,-33,34,34,26, 
  /* [20][0][][] */ -2,-8,54,-127,-72,-12,74,-35, 
  /* [21][0][][] */ -111,82,37,-124,127,74,118,12, 
  /* [22][0][][] */ 76,-15,-72,62,60,-39,-61,127, 
  /* [23][0][][] */ 38,-103,-127,-57,60,1,-83,104, 
  /* [24][0][][] */ 43,-7,-87,11,-34,43,-127,105, 
  /* [25][0][][] */ -1,-20,63,7,127,-13,-88,-52, 
  /* [26][0][][] */ -8,105,127,-17,-32,-18,55,-67, 
  /* [27][0][][] */ -55,63,126,-81,31,23,115,-127, 
  /* [28][0][][] */ 76,7,116,127,96,-25,11,103, 
  /* [29][0][][] */ 54,56,96,6,-56,32,-127,84, 
  /* [30][0][][] */ 42,0,-74,57,-127,-45,-37,43, 
  /* [31][0][][] */ 22,109,113,-72,-86,54,103,-127, 
  /* [32][0][][] */ 72,-4,0,24,91,127,37,-27, 
  /* [33][0][][] */ 14,-38,-127,-3,12,-22,-45,68, 
  /* [34][0][][] */ 36,-43,40,-127,-14,86,-28,14, 
  /* [35][0][][] */ -17,16,83,-2,13,-127,5,-21, 
  /* [36][0][][] */ 5,10,-25,-127,-10,-1,15,-36, 
  /* [37][0][][] */ 75,-10,-19,-74,-73,127,-55,-74, 
  /* [38][0][][] */ 81,-41,-8,97,43,17,-38,127, 
  /* [39][0][][] */ 127,80,32,62,-8,78,-39,-3, 
  /* [40][0][][] */ 41,-127,-112,-50,7,13,-54,112, 
  /* [41][0][][] */ -8,-87,-127,-95,-10,-101,-51,0, 
  /* [42][0][][] */ 61,107,73,127,-65,-37,16,39, 
  /* [43][0][][] */ 127,-26,-92,-126,-77,-52,7,72, 
  /* [44][0][][] */ -7,91,124,-103,-127,-19,113,-125, 
  /* [45][0][][] */ 43,18,-127,53,-29,36,17,57, 
  /* [46][0][][] */ 65,-30,-60,-127,27,-28,-42,60, 
  /* [47][0][][] */ 82,-127,120,-74,71,-15,22,12, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00072668003849685192, 0.0017095727380365133, 0.002737672533839941, 0.0038006133399903774, 0.0025279778055846691, 0.003741406137123704, 0.0015920089790597558, 0.0025653985794633627, 0.0036630656104534864, 0.001530579524114728, 0.00072573655052110553, 0.0030202174093574286, 0.0019930517300963402, 0.0032211313955485821, 0.0022689327597618103, 0.0024720849469304085, 0.0017286866204813123, 0.0043681054376065731, 0.001129414769820869, 0.0022048852406442165, 0.0025214075576514006, 0.0029626081231981516, 0.0029023531824350357, 0.0014850643929094076, 0.0033352391328662634, 0.0029236236587166786, 0.0029845198150724173, 0.001008357503451407, 0.0034386955667287111, 0.0013979525538161397, 0.0045280973426997662, 0.00090201926650479436, 0.0030874575022608042, 0.0022126175463199615, 0.0026599820703268051, 0.0040077744051814079, 0.0037718885578215122, 0.0025283012073487043, 0.0037991614080965519, 0.0024527849163860083, 0.0010532982414588332, 0.0019676215015351772, 0.0012531529646366835, 0.0019195080967620015, 0.002027453389018774, 0.0037976342719048262, 0.001967207295820117, 0.0025542599614709616, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[8] = { -13490, -38303, 890, 5609, -14004, -741, -28926, -166, };
const TfArray<1, int> tensor_dimension15 = { 1, { 8 } };
const TfArray<8, float> quant15_scale = { 8, { 0.00013666199811268598, 7.9363730037584901e-05, 5.9175799833610654e-05, 6.1518374423030764e-05, 8.860332309268415e-05, 6.3071682234294713e-05, 5.9663954743882641e-05, 9.4254995929077268e-05, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[8*1*1*48] = { 
  /* [0][0][][] */ 43,56,-69,54,22,18,-84,-29,-1,-27,6,-28,-13,-7,40,10,49,-14,44,-17,16,-36,42,-5,14,-30,-16,17,-5,-1,-9,-3,38,17,30,12,127,60,28,-23,-7,-23,-7,-15,73,26,22,-48, 
  /* [1][0][][] */ 67,40,13,-10,36,75,-4,-18,23,58,-29,-79,113,-11,1,65,12,42,34,-85,127,-19,43,63,42,27,55,17,20,-82,73,72,45,120,26,114,73,21,10,22,96,15,51,50,24,37,102,-60, 
  /* [2][0][][] */ -20,9,68,127,-39,14,10,62,34,66,23,-74,-33,116,11,48,-87,-94,75,-4,-1,62,-54,-68,-30,-36,36,-12,-107,12,1,-10,-36,-19,-89,-40,13,22,-100,-23,-14,-55,-25,25,69,-68,-26,29, 
  /* [3][0][][] */ -16,64,-75,-24,16,-87,-3,68,109,-78,-30,5,1,-25,17,68,18,17,-3,-23,4,28,-92,49,-16,-42,51,-4,71,-40,56,-47,31,-9,-20,-56,-127,5,-75,28,-19,-59,35,5,-48,22,-13,-32, 
  /* [4][0][][] */ 32,-39,24,-10,-65,78,9,52,-95,-34,33,61,81,-58,-57,-70,102,43,38,-32,3,-91,-27,35,-36,-8,-57,-127,-67,-35,67,22,94,-10,92,104,40,49,60,19,13,29,-55,-46,64,83,98,-60, 
  /* [5][0][][] */ 45,79,26,72,24,29,-52,-108,-91,33,-8,-4,26,63,42,-70,56,104,-19,33,0,-73,-24,-52,-81,-71,-29,60,11,34,-18,48,-1,-73,66,-5,-27,127,-20,-101,-3,-27,-13,-33,10,-15,-45,101, 
  /* [6][0][][] */ 127,62,11,111,-94,25,22,55,29,-78,62,77,92,-36,-42,-69,47,40,-69,17,87,-25,-19,9,16,70,-29,-37,30,-50,80,69,23,-39,-8,81,102,-75,-3,12,-70,80,-96,57,72,107,92,-52, 
  /* [7][0][][] */ 19,21,127,34,-32,49,-85,-2,-42,99,3,-2,44,44,12,10,-46,-11,-56,16,-16,22,8,-44,-8,27,40,-17,7,4,23,-21,-92,-19,74,22,80,-11,35,-13,-23,-42,-34,-35,-6,-28,2,29, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant16_scale = { 8, { 0.0062502510845661163, 0.0036297084297984838, 0.0027064115274697542, 0.0028135492466390133, 0.0040522823110222816, 0.0028845900669693947, 0.0027287371922284365, 0.0043107620440423489, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[48] = { 29591, -23272, -1920, 4339, -2219, 13501, 4756, -1509, -10327, 4376, -3400, -3417, -11400, -19309, 7448, -1106, -12497, 46601, -5830, -15642, 28654, -1505, -790, -910, -2478, -2738, -3462, -5, -2072, 563, 1322, 26210, 29766, -3543, 12670, 22129, -4734, 17235, 5431, -708, -1666, -10655, -2501, 4683, 4378, 26178, 17817, -7199, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 4.8886424337979406e-05, 5.5057746067177504e-05, 0.00051928026368841529, 0.00016889596008695662, 0.00013105614925734699, 7.6890915806870908e-05, 9.46154905250296e-05, 0.00023737759329378605, 4.5813965698471293e-05, 0.00018467413610778749, 0.0001224098086822778, 9.8591990536078811e-05, 0.00010811987885972485, 6.3868756114970893e-05, 8.8207591034006327e-05, 7.2447255661245435e-05, 6.8561625084839761e-05, 3.6858615203527734e-05, 0.00021626168745569885, 5.0454833399271592e-05, 4.878908657701686e-05, 0.00023687792418058962, 0.00014666421338915825, 0.00010842397023225203, 0.00013458557077683508, 0.00013909419067203999, 0.00012548257654998451, 0.00013306223263498396, 0.00014577634283341467, 0.00011181768786627799, 9.5641400548629463e-05, 7.4129115091636777e-05, 4.9128415412269533e-05, 0.00013407674850896001, 0.0001043282900354825, 9.4635761342942715e-05, 0.00039785189437679946, 0.00011951605847571045, 9.0503526735119522e-05, 0.00024228768597822636, 8.2256054156459868e-05, 0.00010299753921572119, 0.00014429388102144003, 0.00011624888429651037, 0.00010854615538846701, 6.480155570898205e-05, 9.5696086646057665e-05, 0.00012375482765492052, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*48] = { 
  /* [0][0][][] */ -75,2,37,-1,127,-41,15,6,0,23,-34,-31,18,-3,-98,29,59,-63,-7,55,-20,7,-41,-2,-10,15,15,-63,-13,127,75,-72,-49,108,87,-74,16,-54,-126,-22,-6,-18,-1,-48,-3,-6,-127,1, -82,123,-34,24,-1,-76,101,-29,116,13,9,127,39,127,-17,8,60,-127,15,55,-61,-12,95,-109,12,63,-114,7,-18,-100,127,-127,-127,-72,-23,-30,-56,-18,-127,13,-72,-16,17,-127,24,-42,20,42, -49,-4,3,-9,61,-47,16,-4,23,23,-74,-49,-11,-4,-92,33,59,-43,-7,31,-51,12,-51,-12,29,8,9,-122,-25,36,-76,-51,-6,-2,71,-32,19,-19,-102,8,8,11,6,-49,-9,-52,-122,-23, 
  /* [0][1][][] */ -127,127,-36,-65,20,-74,18,-21,11,24,20,17,95,95,-82,58,127,-100,18,73,0,-52,-71,-38,-127,-7,-35,8,2,22,73,-74,-113,127,-116,-86,43,-55,17,63,-124,23,-62,48,-17,-127,8,-13, -7,102,127,127,-28,83,-127,127,127,-127,-96,49,127,97,127,-77,-30,-75,127,-22,-127,127,127,-4,88,127,63,127,127,-63,115,8,-68,-76,-49,-127,127,127,64,53,-53,127,-21,64,127,15,-23,-108, -104,72,-65,-52,-37,-101,12,-38,-27,13,89,18,47,112,-29,127,109,-73,-15,54,36,-68,-67,-39,32,-10,-29,17,3,20,78,-44,-40,-21,-127,-28,29,-54,32,-127,-80,26,127,53,-31,-112,-6,127, 
  /* [0][2][][] */ -50,-21,0,-17,21,-23,32,16,35,23,114,17,16,-15,-57,99,46,-75,-41,34,-12,-6,-48,48,-14,-6,-38,-33,6,57,-32,-5,-16,56,-59,33,-31,-48,35,-27,61,-19,-2,5,-22,26,-2,-17, -88,103,-1,7,-92,-127,62,-68,104,20,122,-25,-32,27,-42,84,33,-18,-5,127,-89,7,50,127,13,-121,127,13,13,-59,-88,-73,18,-33,-59,-76,-61,-45,13,40,127,36,-35,34,-21,-46,-88,8, 39,-32,46,-14,-25,-28,26,20,42,28,127,23,23,-7,-39,50,35,-46,-59,34,-51,1,-51,41,15,-5,-25,-49,7,-23,-34,17,-10,1,-31,59,-23,-30,42,11,45,-13,26,-11,-18,-22,27,47, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0036788026336580515, 0.0041432068683207035, 0.039076890796422958, 0.012709763832390308, 0.0098622404038906097, 0.0057861972600221634, 0.007120007649064064, 0.017863145098090172, 0.0034475936554372311, 0.013897103257477283, 0.0092115858569741249, 0.007419247180223465, 0.0081362398341298103, 0.0048062535934150219, 0.0066378000192344189, 0.005451803095638752, 0.0051594013348221779, 0.0027736856136471033, 0.016274129971861839, 0.0037968284450471401, 0.0036714775487780571, 0.017825543880462646, 0.01103677973151207, 0.0081591233611106873, 0.010127836838364601, 0.010467119514942169, 0.0094428183510899544, 0.010013203136622906, 0.010969964787364006, 0.0084145078435540199, 0.0071972091682255268, 0.0055783661082386971, 0.0036970127839595079, 0.010089547373354435, 0.0078509151935577393, 0.0071215326897799969, 0.029939161613583565, 0.008993825875222683, 0.0068105738610029221, 0.018232639878988266, 0.0061899349093437195, 0.007750773336738348, 0.010858407244086266, 0.0087479641661047935, 0.0081683183088898659, 0.0048764483071863651, 0.0072013246826827526, 0.0093128019943833351, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[48] = { 1033, 8454, -9580, 8048, 3430, 6580, 4269, 10042, 16417, 6398, -3974, -251, 1881, 6399, 6981, -1640, -121, 7817, 13648, 1332, 4099, 8824, 4328, 8640, 28921, 8499, 2061, 14090, 2318, 7642, -4925, 10074, 2111, 9929, 8033, 6180, 53167, 18271, 8548, 16667, 2713, 974, 5094, 2003, 4452, 2968, 3253, 3817, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00019992490706499666, 8.5648629465140402e-05, 8.8977511040866375e-05, 7.7871940447948873e-05, 0.00015080107550602406, 9.9472614238038659e-05, 0.0001071307560778223, 8.0240140960086137e-05, 5.1157247071387246e-05, 0.00011973311484325677, 0.00011131667270092294, 0.00012905414041597396, 0.00013126812700647861, 9.0700101281981915e-05, 8.1502614193595946e-05, 9.5453673566225916e-05, 0.00014053867198526859, 9.0171502961311489e-05, 7.0541216700803488e-05, 0.00010962281521642581, 0.00012083083856850863, 8.9211680460721254e-05, 0.00011290072870906442, 7.643499702680856e-05, 3.2918960641836748e-05, 9.6815383585635573e-05, 0.00013967766426503658, 7.0694659370929003e-05, 0.0001079010107787326, 0.00010223484423477203, 0.00010722024308051914, 7.8492390457540751e-05, 0.00018074928084388375, 7.5472657044883817e-05, 8.8406966824550182e-05, 0.00012428028276190162, 2.7935224352404475e-05, 5.2686242270283401e-05, 6.9281428295653313e-05, 5.8113524573855102e-05, 0.00013528451381716877, 0.00012011531362077221, 0.00013329728972166777, 0.00010779067815747112, 0.00013201066758483648, 0.00010995898628607392, 0.00012841093121096492, 9.533125557936728e-05, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -81,-127,-38,33,-39,-16,61,-53, 
  /* [1][0][][] */ -21,127,59,-86,14,-75,-90,95, 
  /* [2][0][][] */ -127,-62,46,16,68,7,22,-10, 
  /* [3][0][][] */ 4,-42,-127,-71,37,-40,-47,49, 
  /* [4][0][][] */ -44,-91,75,-24,127,-54,26,-22, 
  /* [5][0][][] */ -19,57,48,-96,111,26,-59,127, 
  /* [6][0][][] */ -110,111,35,51,-47,-19,59,-127, 
  /* [7][0][][] */ 38,4,62,32,38,-127,14,108, 
  /* [8][0][][] */ -18,81,1,-34,7,126,127,-65, 
  /* [9][0][][] */ 59,127,9,-56,-63,-43,-41,94, 
  /* [10][0][][] */ 44,-4,23,12,-13,30,-127,-91, 
  /* [11][0][][] */ -52,23,-112,-58,127,30,43,39, 
  /* [12][0][][] */ 86,32,-34,-5,127,80,19,6, 
  /* [13][0][][] */ -127,-114,2,49,-100,51,51,19, 
  /* [14][0][][] */ 10,93,-84,114,-69,127,-12,19, 
  /* [15][0][][] */ -17,-120,-36,-125,127,82,-35,87, 
  /* [16][0][][] */ 76,-86,8,35,27,-17,35,-127, 
  /* [17][0][][] */ -83,-94,-127,84,21,80,73,-103, 
  /* [18][0][][] */ 82,2,127,24,-29,-113,-59,-27, 
  /* [19][0][][] */ -14,127,27,27,93,-98,-69,-40, 
  /* [20][0][][] */ -59,-17,-127,-30,41,-11,0,-10, 
  /* [21][0][][] */ -101,-34,17,49,-66,-127,78,-41, 
  /* [22][0][][] */ 61,-24,-127,-60,-32,-28,-15,51, 
  /* [23][0][][] */ -42,43,127,-50,-106,33,-9,-111, 
  /* [24][0][][] */ -100,102,87,108,127,66,-16,-35, 
  /* [25][0][][] */ -49,-127,-70,30,-64,27,65,-3, 
  /* [26][0][][] */ 88,104,-121,-82,-127,-15,-43,36, 
  /* [27][0][][] */ 72,41,-66,20,-127,36,-46,-28, 
  /* [28][0][][] */ -42,57,33,-82,64,77,-127,-82, 
  /* [29][0][][] */ 39,18,-9,-67,-127,-13,22,-45, 
  /* [30][0][][] */ -78,6,30,127,51,12,-23,-24, 
  /* [31][0][][] */ 6,-127,0,-80,-114,50,-69,-125, 
  /* [32][0][][] */ -127,-2,23,-9,10,-31,-2,17, 
  /* [33][0][][] */ 50,-68,-127,-82,17,29,-50,0, 
  /* [34][0][][] */ 41,55,116,4,-127,-52,53,-38, 
  /* [35][0][][] */ 93,27,26,8,-106,-36,-127,-47, 
  /* [36][0][][] */ 127,12,62,-57,18,-37,87,82, 
  /* [37][0][][] */ 127,121,-16,-8,74,88,-101,34, 
  /* [38][0][][] */ -47,111,81,127,-2,34,25,-85, 
  /* [39][0][][] */ 24,66,127,-24,94,-81,-23,24, 
  /* [40][0][][] */ 74,54,43,9,-96,-127,20,-62, 
  /* [41][0][][] */ 27,-48,15,127,-33,72,16,98, 
  /* [42][0][][] */ -22,-96,82,-46,127,-22,84,25, 
  /* [43][0][][] */ -1,-33,-105,-20,127,23,-85,107, 
  /* [44][0][][] */ 88,-20,127,-18,12,37,-58,4, 
  /* [45][0][][] */ -26,30,32,-19,-97,-127,-21,91, 
  /* [46][0][][] */ -57,83,82,46,-5,-29,34,-127, 
  /* [47][0][][] */ 38,-12,33,121,-53,-127,110,92, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0057630846276879311, 0.002468928461894393, 0.0025648877490311861, 0.0022447558585554361, 0.0043470291420817375, 0.002867422066628933, 0.0030881776474416256, 0.0023130220361053944, 0.001474671415053308, 0.0034514563158154488, 0.0032088418956845999, 0.0037201466038823128, 0.0037839675787836313, 0.0026145435404032469, 0.0023494143970310688, 0.0027515711262822151, 0.004051202442497015, 0.0025993059389293194, 0.0020334385335445404, 0.0031600142829120159, 0.0034830996301025152, 0.0025716379750519991, 0.0032545041758567095, 0.0022033341228961945, 0.00094893004279583693, 0.002790824044495821, 0.0040263826958835125, 0.002037861617282033, 0.0031103810761123896, 0.0029470468871295452, 0.0030907571781426668, 0.0022626409772783518, 0.0052103232592344284, 0.0021755935158580542, 0.0025484410580247641, 0.003582534147426486, 0.0008052676566876471, 0.001518746605142951, 0.0019971234723925591, 0.0016751948278397322, 0.0038997449446469545, 0.0034624736290425062, 0.0038424604572355747, 0.0031072006095200777, 0.0038053719326853752, 0.0031697049271315336, 0.0037016053684055805, 0.0027480423450469971, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[8] = { 1150, -3862, 15707, -10753, -11223, -13985, -6972, -3212, };
const TfArray<1, int> tensor_dimension21 = { 1, { 8 } };
const TfArray<8, float> quant21_scale = { 8, { 8.9825785835273564e-05, 0.00011511581396916881, 0.00011048675514757633, 0.00012370648619253188, 9.239494102075696e-05, 0.00013723404845222831, 0.00014086518785916269, 0.00015987434017006308, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[8*1*1*48] = { 
  /* [0][0][][] */ -12,-18,50,-41,62,98,72,101,117,-53,-20,61,-28,-15,26,-12,50,42,15,-53,-26,26,-95,-29,32,-17,19,-78,-33,43,49,30,36,57,59,18,123,-54,-75,4,-53,-65,-25,8,-66,-85,-127,65, 
  /* [1][0][][] */ -5,7,-47,43,8,5,-39,-10,-53,31,23,95,-20,2,-19,127,45,66,8,-31,-49,-16,-70,31,23,-1,-20,-89,58,-13,-52,-74,56,-23,-25,-54,25,42,50,-41,12,79,58,-33,10,-30,-44,-28, 
  /* [2][0][][] */ 10,-77,-39,4,-30,19,-2,5,117,23,-7,-25,-30,-74,45,6,4,-66,-32,-1,-118,55,17,30,8,36,-49,-37,-15,-32,45,-43,-105,30,-51,60,-72,74,-25,-17,127,-31,-3,39,35,43,-60,-47, 
  /* [3][0][][] */ -21,-105,93,48,31,-114,-16,-7,-112,127,59,-45,60,6,-14,19,60,40,-23,40,71,88,23,-53,20,90,63,36,-20,-75,20,5,-29,13,56,11,-25,-74,-33,40,-20,-3,28,-61,-70,26,11,23, 
  /* [4][0][][] */ -24,49,-7,76,26,8,16,-12,-71,85,46,75,-11,25,56,24,-3,-122,-10,-22,99,-22,-115,54,67,-34,27,44,45,29,-23,-53,-48,127,0,7,75,-36,34,15,-37,36,-8,-38,-9,-65,-48,28, 
  /* [5][0][][] */ -25,-12,-9,-80,-106,25,96,38,21,67,-13,-33,-93,-22,66,-22,-65,46,-49,-70,-13,104,8,28,96,27,1,4,-15,-31,127,-40,-11,90,65,92,-22,47,81,41,-15,-32,-17,27,-51,52,34,44, 
  /* [6][0][][] */ -2,-27,-12,18,-59,-52,13,9,18,-10,42,6,-58,-32,29,59,1,-54,4,-59,64,-17,-1,-31,5,5,12,33,40,-5,13,127,42,-16,-17,23,4,-11,21,8,6,39,-19,-50,-10,-27,-29,34, 
  /* [7][0][][] */ -23,-13,-42,1,12,-25,1,8,45,4,21,0,-2,16,3,-2,29,-2,3,-7,-52,6,9,-21,1,-7,-52,-9,-7,-10,15,27,17,-8,30,6,-25,127,-11,-34,-41,-7,-47,-29,27,67,-61,-12, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant22_scale = { 8, { 0.0040573575533926487, 0.0051996875554323196, 0.0049905967898666859, 0.0055877212435007095, 0.0041734040714800358, 0.006198749877512455, 0.0063627655617892742, 0.0072213937528431416, } };
const TfArray<8, int> quant22_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int32_t tensor_data23[48] = { 355, 52239, 50572, -2394, -356, -18496, 32326, 25712, -22752, -3939, -2724, 32906, 26454, -26832, -20147, -5951, -1387, 64979, -870, -2249, 67716, 17699, -14144, -14419, 27618, 19688, -4367, -3773, -9247, 68, 55367, -2107, -8156, 12367, 23110, 20469, -6700, 57290, -6016, 2623, 47635, 5, -6067, 21228, 1307, -1897, -14856, 17132, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00017788329569157213, 4.8161073209485039e-05, 4.8206082283286378e-05, 6.0488426242955029e-05, 3.4857599530369043e-05, 7.9495934187434614e-05, 5.7928289606934413e-05, 5.826397318742238e-05, 0.00020274508278816938, 3.9969858335098252e-05, 6.8500354245770723e-05, 5.0300819566473365e-05, 6.5142470702994615e-05, 0.00011164323223056272, 4.5324872189667076e-05, 3.9813992771087214e-05, 6.5717751567717642e-05, 6.0275211581028998e-05, 0.00022058084141463041, 5.1522460125852376e-05, 3.5870765714207664e-05, 5.8571014960762113e-05, 5.6000939366640523e-05, 7.5635362009052187e-05, 5.6600794778205454e-05, 6.8867208028677851e-05, 0.00012336230429355055, 7.9761251981835812e-05, 5.349611456040293e-05, 0.00024122490140143782, 5.3556312195723876e-05, 5.3658939577871934e-05, 3.2073025067802519e-05, 6.8628534791059792e-05, 4.9463851610198617e-05, 7.0224727096501738e-05, 5.4650226957164705e-05, 6.6967739257961512e-05, 5.3128154831938446e-05, 3.4211716410936788e-05, 5.5372893257299438e-05, 0.00012583174975588918, 4.5921700802864507e-05, 6.0900576499989256e-05, 8.6564708908554167e-05, 0.00010931270662695169, 0.00011017273209290579, 6.6599335696082562e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[1*3*3*48] = { 
  /* [0][0][][] */ 40,-108,-31,46,70,40,-64,-73,30,81,113,-111,-40,79,119,63,53,-103,64,80,-57,-35,56,78,-43,-5,58,74,105,109,-39,53,48,-70,-123,-41,96,-32,81,26,-95,20,47,-98,72,127,82,-33, 74,-121,-80,76,115,53,-55,-84,21,104,110,-126,-88,103,113,85,53,-121,61,107,-52,-127,58,100,-90,-40,99,85,127,127,-83,83,60,-127,-127,-105,83,-71,90,20,-114,57,66,-71,108,111,87,-63, 58,-72,-58,20,26,7,-38,-28,39,56,30,-66,-48,49,63,38,13,-48,16,25,3,-100,48,64,-68,6,23,42,56,72,-29,21,41,-80,-109,-32,55,-10,15,35,-44,10,30,-11,47,46,18,-27, 
  /* [0][1][][] */ 17,-127,-71,69,112,68,-127,-93,108,105,115,-119,-61,98,127,104,127,-98,32,109,-102,-101,85,127,-126,-60,78,103,105,45,-73,111,121,-106,-81,-67,90,-75,127,92,-108,53,78,-127,87,90,40,-75, 27,-125,-127,127,127,127,-121,-127,127,127,127,-127,-127,127,115,127,100,-127,45,127,-127,-115,127,106,-127,-127,127,127,116,37,-127,127,127,-97,-75,-127,127,-127,117,127,-127,127,109,-105,127,101,45,-127, -15,-107,-108,46,43,38,-91,-45,82,59,25,-76,-49,42,35,73,45,-55,17,26,-41,-79,68,88,-80,-19,17,71,43,-20,-47,31,69,-73,-97,-29,51,-33,21,47,-26,43,26,-44,34,11,-9,-55, 
  /* [0][2][][] */ -49,-56,-55,36,38,28,-38,-10,-64,45,20,-59,-16,47,86,80,51,-58,-83,31,-50,-2,50,43,-79,-54,62,61,51,-3,-70,41,50,-28,-36,-33,59,-40,29,113,-47,72,83,-84,25,33,-101,-23, -127,-56,-89,53,44,80,-53,-32,-47,65,67,-69,-103,62,39,101,79,-63,-127,58,-60,-54,64,22,-93,-65,68,43,33,-23,-105,48,72,-64,-41,-73,66,-62,49,111,-42,72,127,-64,69,-34,-127,-76, -52,-31,-69,33,15,32,-15,-5,-58,35,31,-28,-11,31,13,68,14,-41,-60,32,-40,-5,27,61,-75,-9,18,46,53,9,-49,12,46,-4,-45,-21,35,-22,-15,46,-19,56,44,-27,20,-18,-50,-39, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.013058635406196117, 0.0035355647560209036, 0.0035388688556849957, 0.0044405311346054077, 0.002558940090239048, 0.0058358958922326565, 0.0042525883764028549, 0.0042772311717271805, 0.014883770607411861, 0.0029342372436076403, 0.0050286967307329178, 0.0036926460452377796, 0.0047821900807321072, 0.0081958696246147156, 0.003327355720102787, 0.0029227950144559145, 0.004824422299861908, 0.0044248788617551327, 0.016193116083741188, 0.0037823282182216644, 0.0026333178393542767, 0.0042997715063393116, 0.0041110990568995476, 0.0055524865165352821, 0.0041551352478563786, 0.0050556277856230736, 0.0090561816468834877, 0.0058553735725581646, 0.0039272168651223183, 0.017708621919155121, 0.0039316359907388687, 0.0039391699247062206, 0.0023545208387076855, 0.0050381068140268326, 0.0036312032025307417, 0.0051552848890423775, 0.0040119416080415249, 0.0049161855131387711, 0.0039002043195068836, 0.0025115250609815121, 0.004064993467181921, 0.0092374663800001144, 0.0033711695577949286, 0.0044707874767482281, 0.0063548237085342407, 0.0080247828736901283, 0.0080879181623458862, 0.0048891403712332249, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 3 };
const ALIGN(16) int32_t tensor_data25[48] = { -1964, 5341, 7973, -987, -59, 10828, 4910, 3114, 11311, 2277, -3039, 2657, 6507, 2077, -397, 1853, -2711, 12070, -3845, -1159, 1332, 1333, 391, -506, 221, 4087, -2379, -1538, -990, -4630, 13663, 5220, 829, 1172, 705, 2004, 1959, 11610, 2828, 565, 10544, -2722, 944, 1937, -3860, -1843, 16125, 3976, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00024429833865724504, 0.00014293724962044507, 0.00010302229202352464, 0.00017750625556800514, 0.00023966816661413759, 7.7798584243282676e-05, 0.00017281723557971418, 0.00015137561422307044, 8.6229498265311122e-05, 0.00025840351008810103, 0.00014641403686255217, 0.00017156987451016903, 0.00010260732960887253, 0.0002096774842357263, 0.00025157799245789647, 0.00012011281069135293, 0.00015848608745727688, 8.454572525806725e-05, 0.00011355169408489019, 0.00026922012330032885, 0.00026935987989418209, 0.00017890588787849993, 0.00018155014549847692, 0.00020155744277872145, 0.00026268031797371805, 0.00013601075625047088, 0.00017395637405570596, 0.00018286515842191875, 0.00017960165860131383, 0.00010489355190657079, 7.6293392339721322e-05, 0.00013846518413629383, 0.00025588733842596412, 0.00021951130474917591, 0.00020398401829879731, 0.00018959006411023438, 0.00016547643463127315, 7.6368560257833451e-05, 0.00017808670236263424, 0.00016300984134431928, 9.6966650744434446e-05, 8.7695087131578475e-05, 0.00023542462440673262, 0.00019667146261781454, 0.00015086290659382939, 0.00021726646809838712, 6.4650048443581909e-05, 0.00013157782086636871, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 44,12,-35,22,-45,37,-127,17, 
  /* [1][0][][] */ -10,-61,-127,12,-5,-7,102,-84, 
  /* [2][0][][] */ -127,-60,-71,-51,-43,46,-119,-2, 
  /* [3][0][][] */ -67,-22,31,-26,-15,-127,-108,-23, 
  /* [4][0][][] */ -42,-127,-35,13,66,13,-53,-32, 
  /* [5][0][][] */ 70,-44,100,41,-127,50,-84,-88, 
  /* [6][0][][] */ 24,-127,-63,-36,-3,57,-55,-73, 
  /* [7][0][][] */ -35,-80,-69,-58,69,-127,15,25, 
  /* [8][0][][] */ 45,86,45,80,42,-41,-2,127, 
  /* [9][0][][] */ -28,-55,-55,7,51,-14,127,-8, 
  /* [10][0][][] */ -32,19,-127,9,19,23,100,-93, 
  /* [11][0][][] */ 5,-33,-41,5,-127,21,-5,62, 
  /* [12][0][][] */ 78,48,-33,58,-93,127,95,-14, 
  /* [13][0][][] */ -42,4,22,-30,53,-127,-4,74, 
  /* [14][0][][] */ -86,-49,16,29,14,62,-100,-127, 
  /* [15][0][][] */ 52,85,38,10,-127,56,121,-43, 
  /* [16][0][][] */ -23,-73,6,79,-11,-85,2,-127, 
  /* [17][0][][] */ -66,127,31,-18,-66,-55,-77,-76, 
  /* [18][0][][] */ 88,127,-48,-70,110,78,-93,-99, 
  /* [19][0][][] */ -26,81,-6,5,-127,0,-83,-100, 
  /* [20][0][][] */ -127,-13,5,17,15,12,87,52, 
  /* [21][0][][] */ -43,3,58,-4,-70,-104,-127,25, 
  /* [22][0][][] */ -9,-44,-52,-8,-127,-7,-1,66, 
  /* [23][0][][] */ 58,13,-11,-13,127,57,-74,67, 
  /* [24][0][][] */ 127,12,-43,19,-81,2,-7,-6, 
  /* [25][0][][] */ 41,-44,48,108,-53,-127,42,97, 
  /* [26][0][][] */ 17,127,16,49,82,-12,15,-18, 
  /* [27][0][][] */ -114,120,66,-27,127,-67,12,81, 
  /* [28][0][][] */ -74,-63,-50,-47,92,-127,33,-26, 
  /* [29][0][][] */ -36,-4,65,30,127,-107,-75,55, 
  /* [30][0][][] */ 127,64,-122,-116,-66,-91,-77,-77, 
  /* [31][0][][] */ 34,8,47,60,-127,13,34,1, 
  /* [32][0][][] */ 127,16,50,49,-33,-51,91,57, 
  /* [33][0][][] */ 123,36,-42,12,-127,-60,23,48, 
  /* [34][0][][] */ 48,-12,-11,18,-50,127,11,-67, 
  /* [35][0][][] */ 122,60,-22,-38,62,-107,26,127, 
  /* [36][0][][] */ -19,-36,84,-97,-35,-13,81,-127, 
  /* [37][0][][] */ 82,-54,65,41,111,2,37,-127, 
  /* [38][0][][] */ 60,127,0,-22,-33,30,34,78, 
  /* [39][0][][] */ 35,16,-90,98,-32,-63,-77,127, 
  /* [40][0][][] */ -11,-25,0,-34,31,-127,17,34, 
  /* [41][0][][] */ -41,48,-127,-72,99,117,74,-117, 
  /* [42][0][][] */ 20,-53,-45,13,89,127,27,63, 
  /* [43][0][][] */ -10,59,-36,22,-127,-74,70,-60, 
  /* [44][0][][] */ -127,-57,0,-46,48,43,-117,-74, 
  /* [45][0][][] */ -68,47,-51,10,22,-13,-71,127, 
  /* [46][0][][] */ -30,59,127,12,-78,-61,-29,26, 
  /* [47][0][][] */ -127,-114,-43,-46,90,93,-36,84, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0036176939029246569, 0.0021166873630136251, 0.001525606494396925, 0.0026286027859896421, 0.0035491280723363161, 0.001152080949395895, 0.0025591654703021049, 0.0022416471038013697, 0.0012769302120432258, 0.0038265704642981291, 0.002168173436075449, 0.0025406938511878252, 0.0015194615116342902, 0.0031050108373165131, 0.0037254949565976858, 0.001778691541403532, 0.0023469424340873957, 0.0012519960291683674, 0.0016815311973914504, 0.0039867484010756016, 0.0039888177998363972, 0.0026493293698877096, 0.0026884868275374174, 0.0029847649857401848, 0.0038899036590009928, 0.0020141163840889931, 0.0025760342832654715, 0.0027079600840806961, 0.0026596325915306807, 0.0015533170662820339, 0.0011297913733869791, 0.0020504628773778677, 0.0037893096450716257, 0.0032506349962204695, 0.0030206989031285048, 0.0028075459413230419, 0.0024504591710865498, 0.0011309044202789664, 0.0026371984276920557, 0.002413932466879487, 0.0014359314227476716, 0.0012986334040760994, 0.003486287547275424, 0.0029124110005795956, 0.002234054496511817, 0.0032173923682421446, 0.00095737079391255975, 0.0019484711810946465, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[8] = { 15248, 23759, 6616, 2241, 5424, -22420, 4797, -8830, };
const TfArray<1, int> tensor_dimension27 = { 1, { 8 } };
const TfArray<8, float> quant27_scale = { 8, { 8.0548968981020153e-05, 8.6717409431003034e-05, 0.00011189004726475105, 0.00015327306755352765, 7.3632589192129672e-05, 9.3458649644162506e-05, 5.1446240831864998e-05, 9.1376954514998943e-05, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[8*1*1*48] = { 
  /* [0][0][][] */ 44,-56,117,75,21,-50,17,16,6,68,-23,15,-57,-82,33,6,-111,66,-41,67,-55,85,6,-41,9,-43,84,-28,-34,18,-37,121,-60,-16,-34,-102,-69,-51,-39,-22,-21,59,-127,22,69,36,32,57, 
  /* [1][0][][] */ -54,-45,57,-3,-19,25,-39,-31,53,-2,9,-23,-23,25,7,15,7,12,25,-9,-66,-26,-79,-22,17,-36,-20,-26,12,-84,-1,-127,-9,-51,-77,-70,-42,-90,-15,32,50,-16,82,-121,-59,-14,-17,1, 
  /* [2][0][][] */ -58,95,-4,38,24,5,23,-28,79,-38,77,70,87,21,39,-59,99,-4,8,33,-23,17,2,127,-112,-48,16,-10,-1,79,-21,-77,-23,5,-1,-70,-18,13,-39,-8,86,-71,12,-19,22,-119,5,-10, 
  /* [3][0][][] */ 60,-12,-52,30,87,-90,11,-108,-32,-1,-56,-91,-20,127,-12,20,-47,-17,-51,-52,39,79,-4,-60,108,54,45,-57,34,-88,60,-53,55,56,117,-62,-36,27,-22,33,16,82,-69,36,8,30,18,30, 
  /* [4][0][][] */ -59,44,-52,79,104,-27,41,-47,-43,-10,-66,38,-59,-14,14,-70,13,65,-39,-40,-52,41,-84,-59,10,-20,26,-44,39,-42,-36,59,-14,79,-81,-75,-67,-73,-43,6,78,-57,127,12,-8,90,-59,-64, 
  /* [5][0][][] */ 60,-1,86,-4,-6,16,57,39,127,4,66,4,89,59,27,-57,-24,38,46,-57,-51,-74,26,44,24,-7,23,53,-39,-24,28,-18,-19,66,-9,69,61,11,-29,-55,-13,77,39,51,-13,-14,86,8, 
  /* [6][0][][] */ 5,-58,-3,2,29,-15,-10,23,-35,-8,114,48,87,82,-44,52,127,-123,-26,-6,-2,-29,-87,18,-60,83,-39,6,-24,-62,75,-45,108,16,-59,-13,-33,2,63,-5,64,-79,10,-57,-94,61,-33,11, 
  /* [7][0][][] */ -10,-38,-49,-33,28,102,3,-6,-13,-46,-127,-89,45,52,-54,-57,-38,14,112,26,-6,-66,66,-21,100,-20,-63,91,-46,-15,-18,-78,-44,68,48,114,82,-57,-13,-32,-17,-5,37,-16,2,-17,14,-66, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant28_scale = { 8, { 0.0047352123074233532, 0.0050978348590433598, 0.0065776528790593147, 0.0090104257687926292, 0.0043286210857331753, 0.0054941307753324509, 0.0030243576038628817, 0.0053717545233666897, } };
const TfArray<8, int> quant28_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[48] = { -314, 912, 2952, 278, -74, 10989, -878, -5252, -8769, -428, -10039, 2429, -9600, -11058, -3394, -68, -9071, 22654, -4342, -1318, -423, -262, -2039, -1361, 32023, 251, -2173, -2022, 2136, -192, 2535, -10485, -2147, 19065, -286, 10386, -19, -4867, 3554, 580, -5924, 111, 5213, 10455, -734, 14645, -3252, -2849, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00020153973309788853, 0.00011181968147866428, 0.00028781776200048625, 0.00013389546074904501, 0.00013751385267823935, 0.0002169100334867835, 0.00015577671001665294, 0.00012019630230497569, 0.00019445065117906779, 0.0001063687086571008, 0.00024457598919980228, 0.00010465632658451796, 7.6637181336991489e-05, 7.7908269304316491e-05, 8.5913008661009371e-05, 0.0002445056161377579, 0.00019434442219790071, 5.2011058869538829e-05, 0.00011964073200942948, 0.0003725281567312777, 0.00013519654748961329, 0.00019718178373295814, 0.00012120132305426523, 0.00047606811858713627, 0.00013289008347783238, 0.00018244332750327885, 0.0001397005544276908, 0.00013445084914565086, 0.00015343687846325338, 0.00012835748202633113, 0.00020912433683406562, 0.00029953388730064034, 0.00022827528300695121, 8.3546008681878448e-05, 0.00032629008637741208, 0.00012182240607216954, 0.00011089705367339775, 8.7558648374397308e-05, 0.00029642716981470585, 0.00038490383303724229, 0.00011601652659010142, 0.00050302228191867471, 0.00029833437292836607, 0.00012821423297282308, 0.0001300360745517537, 8.0793899542186409e-05, 0.00016026812954805791, 0.0001727601484162733, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*48] = { 
  /* [0][0][][] */ -11,-23,36,-36,127,6,7,-21,-38,36,-21,-1,87,28,127,-37,-7,-28,-20,-14,-42,-21,-52,29,-108,57,32,-42,-32,13,-26,-4,-44,25,12,2,82,28,15,-8,78,16,-13,-11,-109,-11,-27,-42, -1,-76,-80,-39,-52,2,38,24,14,-11,60,127,2,60,-60,127,-24,-54,44,-45,-88,-127,-77,76,-127,-92,26,127,7,36,116,6,-127,-107,-46,37,127,-77,101,10,49,-12,-23,-20,-52,-25,73,1, 20,-4,-19,127,47,11,-75,-4,-24,-48,-27,-27,60,12,-59,-43,9,15,0,-8,-1,0,-34,12,-60,-76,-23,56,-19,31,-73,-10,25,62,17,16,-1,50,-127,-7,14,-7,-8,17,-127,-12,-40,42, 
  /* [0][1][][] */ -111,-48,127,-12,-33,-24,92,11,10,86,-2,4,74,46,113,31,14,-127,102,44,97,-9,62,-34,-2,-11,43,-52,8,45,23,53,38,-93,5,127,4,36,-52,-118,41,100,-18,-91,29,-80,-44,11, 127,-58,-71,-83,9,-127,127,127,127,7,127,-55,-127,17,-27,-40,127,-85,127,127,127,89,127,-127,-5,-20,112,-27,127,127,-127,127,35,-122,127,-99,-73,127,-99,123,-127,-127,127,-127,121,-127,127,-110, -11,-86,7,75,-20,-7,-42,1,-12,-127,-36,44,105,29,-57,47,28,3,-8,20,-9,-19,42,-23,1,10,-127,100,-92,12,75,15,-1,-101,-10,-47,61,27,103,6,16,53,-44,-1,74,-34,-37,127, 
  /* [0][2][][] */ -16,117,19,-40,87,21,-37,-28,-33,24,-12,-11,69,31,99,1,-29,17,2,-38,-20,7,5,20,-41,-6,22,-4,-72,-98,-25,-10,-8,32,-18,34,-64,27,-1,113,12,13,2,2,15,-1,-6,-49, -9,86,-53,11,34,-35,-10,27,28,16,30,-48,39,127,-66,-81,-11,-25,93,-66,-64,75,-11,61,51,127,7,112,-81,-99,-29,3,109,-127,-77,-1,-78,-40,-39,-127,28,-30,-53,67,59,24,26,7, 16,127,-25,38,36,8,-61,-11,-21,-21,-5,-14,56,12,-65,-6,-25,4,-40,-19,-4,5,-6,10,-65,32,-35,10,28,-71,5,-2,23,39,3,-23,-54,45,-3,1,-43,-13,7,-17,21,2,4,32, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.01321727130562067, 0.0073332986794412136, 0.018875511363148689, 0.0087810605764389038, 0.0090183606371283531, 0.014225278049707413, 0.010216065682470798, 0.0078826500102877617, 0.012752358801662922, 0.0069758160971105099, 0.016039652749896049, 0.0068635153584182262, 0.0050259786657989025, 0.0051093385554850101, 0.0056343013420701027, 0.016035037115216255, 0.012745392508804798, 0.0034109614789485931, 0.0078462148085236549, 0.02443094365298748, 0.008866388350725174, 0.012931470759212971, 0.0079485606402158737, 0.031221246346831322, 0.0087151266634464264, 0.011964901350438595, 0.0091617675498127937, 0.0088174836710095406, 0.010062615387141705, 0.008417871780693531, 0.013714680448174477, 0.019643871113657951, 0.01497062761336565, 0.0054790698923170567, 0.021398583427071571, 0.0079892920330166817, 0.0072727915830910206, 0.0057422248646616936, 0.019440129399299622, 0.025242557749152184, 0.0076085343025624752, 0.032988939434289932, 0.01956520602107048, 0.0084084775298833847, 0.0085279569029808044, 0.0052985823713243008, 0.010510618798434734, 0.011329864151775837, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[48] = { 12733, 7017, 86020, -4041, -2453, 10046, -1506, 1932, 5698, 269, 14504, 682, 4521, 7770, 4029, 7420, 5481, 3788, -1695, 11813, 3798, 520, 2217, 24155, 72508, 7611, 7907, -3099, -109, 8856, 12331, 12629, 16306, 6492, 11922, -1633, 1594, 3636, 14889, 9232, 1365, 33905, 15744, 9427, 10980, 3351, 5871, 1501, };
const TfArray<1, int> tensor_dimension31 = { 1, { 48 } };
const TfArray<48, float> quant31_scale = { 48, { 7.3125323979184031e-05, 8.7141073890961707e-05, 1.589355269970838e-05, 0.00013025302905589342, 0.00018052772793453187, 0.00010210827895207331, 0.00011572716903174296, 0.00027726261760108173, 0.00012163187057012692, 0.00014025915879756212, 6.166538514662534e-05, 0.00018096579879056662, 0.00010110320727108046, 9.7268421086482704e-05, 0.00012014128878945485, 0.00010628969175741076, 7.9711942817084491e-05, 0.00012430391507223248, 0.00018435892707202584, 7.4999559728894383e-05, 0.00011845502740470693, 0.00018731407180894166, 0.00012981450709048659, 4.0555762097937986e-05, 2.1852672944078222e-05, 0.0001180738108814694, 0.00010852764535229653, 0.00013758099521510303, 0.00019343028543516994, 8.8735032477416098e-05, 7.5359283073339611e-05, 7.140751404222101e-05, 5.9941296058241278e-05, 0.00013885686348658055, 7.744644972262904e-05, 0.00012151154805906117, 0.00014054572966415435, 0.00012448904453776777, 6.1603146605193615e-05, 9.1629248345270753e-05, 0.00011569619528017938, 3.2058596843853593e-05, 6.7317509092390537e-05, 8.6240201198961586e-05, 8.3812941738869995e-05, 0.00016844092169776559, 0.00012800231343135238, 0.00013916587340645492, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -11,41,11,-127,-76,21,14,113, 
  /* [1][0][][] */ 121,24,-33,-24,-73,78,127,9, 
  /* [2][0][][] */ -11,98,-41,-34,-23,81,-41,-127, 
  /* [3][0][][] */ 80,-68,-66,127,-115,-40,-4,-32, 
  /* [4][0][][] */ 45,-57,53,-11,-127,-10,53,21, 
  /* [5][0][][] */ -15,49,-5,-102,-127,-5,-40,9, 
  /* [6][0][][] */ 47,-35,52,42,121,-49,-16,-127, 
  /* [7][0][][] */ 10,22,18,127,21,-7,-2,27, 
  /* [8][0][][] */ 22,24,23,-42,34,127,15,-34, 
  /* [9][0][][] */ 117,28,-14,5,-41,-34,127,67, 
  /* [10][0][][] */ 4,65,-64,-32,-1,127,86,-51, 
  /* [11][0][][] */ -8,-39,-127,107,-61,29,-21,82, 
  /* [12][0][][] */ -107,-84,59,45,25,-127,-38,3, 
  /* [13][0][][] */ 41,28,34,62,-72,127,20,-47, 
  /* [14][0][][] */ -5,-81,-1,-15,-45,-70,-127,83, 
  /* [15][0][][] */ -107,38,-15,-7,99,-2,-127,-39, 
  /* [16][0][][] */ 112,77,-90,-114,62,127,107,34, 
  /* [17][0][][] */ -91,111,-127,25,-8,-12,22,-102, 
  /* [18][0][][] */ 29,-4,-102,127,-12,-47,-38,-66, 
  /* [19][0][][] */ 127,21,25,27,-33,18,118,38, 
  /* [20][0][][] */ 44,-74,-89,127,62,-37,-35,-75, 
  /* [21][0][][] */ 22,48,127,-97,36,-29,22,-85, 
  /* [22][0][][] */ -99,-59,-126,62,-26,15,-9,127, 
  /* [23][0][][] */ 84,33,31,26,-118,127,46,-59, 
  /* [24][0][][] */ 3,16,-127,90,-40,40,50,77, 
  /* [25][0][][] */ 41,-29,-63,127,29,-9,-29,2, 
  /* [26][0][][] */ -72,28,127,-109,-8,47,69,-6, 
  /* [27][0][][] */ -84,78,127,1,8,-18,77,16, 
  /* [28][0][][] */ -48,-117,53,-127,-11,-7,-17,-28, 
  /* [29][0][][] */ -56,-63,1,88,-7,-127,-13,45, 
  /* [30][0][][] */ -127,41,113,-31,46,25,73,25, 
  /* [31][0][][] */ -55,45,82,-127,-36,17,27,62, 
  /* [32][0][][] */ -50,69,77,-75,-4,7,-5,127, 
  /* [33][0][][] */ 7,127,-54,46,31,31,-124,-20, 
  /* [34][0][][] */ 100,15,127,-99,-76,-105,28,-38, 
  /* [35][0][][] */ 73,-17,30,113,79,-86,17,-127, 
  /* [36][0][][] */ 21,63,127,-118,25,-40,32,-124, 
  /* [37][0][][] */ -46,-54,103,60,16,-127,71,-3, 
  /* [38][0][][] */ 83,10,88,40,-40,-55,127,26, 
  /* [39][0][][] */ 64,-80,-16,12,-127,10,85,69, 
  /* [40][0][][] */ -44,62,-120,113,-73,54,-88,127, 
  /* [41][0][][] */ -113,-8,-61,-18,127,17,-76,21, 
  /* [42][0][][] */ -73,52,-34,-34,127,27,-102,-58, 
  /* [43][0][][] */ 117,123,-49,127,-20,-77,75,73, 
  /* [44][0][][] */ -6,20,92,-9,45,-127,15,-20, 
  /* [45][0][][] */ -10,-65,127,81,-33,-25,-99,19, 
  /* [46][0][][] */ 32,-127,-108,60,-98,18,-17,-10, 
  /* [47][0][][] */ -96,-22,43,-10,73,27,-127,-30, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.0023481405805796385, 0.0027982026804238558, 0.0005103607545606792, 0.0041825785301625729, 0.0057969586923718452, 0.0032788175158202648, 0.0037161360960453749, 0.0089032305404543877, 0.0039057428948581219, 0.0045038871467113495, 0.0019801482558250427, 0.0058110253885388374, 0.00324654346331954, 0.0031234037596732378, 0.0038578787352889776, 0.0034130874555557966, 0.0025596446357667446, 0.0039915456436574459, 0.0059199826791882515, 0.0024083245079964399, 0.0038037307094782591, 0.0060148760676383972, 0.0041684969328343868, 0.0013022933853790164, 0.00070171512197703123, 0.0037914894055575132, 0.0034849508665502071, 0.0044178883545100689, 0.0062112747691571712, 0.0028493867721408606, 0.0024198754690587521, 0.002292979508638382, 0.0019247857853770256, 0.0044588577002286911, 0.0024868969339877367, 0.0039018793031573296, 0.004513089545071125, 0.0039974902756512165, 0.0019781498704105616, 0.0029423234518617392, 0.0037151414435356855, 0.0010294393869116902, 0.0021616446319967508, 0.0027692746371030807, 0.002691332483664155, 0.0054088369943201542, 0.0041103055700659752, 0.0044687804765999317, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[8] = { -11320, 2761, -17156, -313, 3802, -4395, 10517, 1780, };
const TfArray<1, int> tensor_dimension33 = { 1, { 8 } };
const TfArray<8, float> quant33_scale = { 8, { 0.00016689924814272672, 0.00012083669571438804, 9.8492506367620081e-05, 6.0381546063581482e-05, 0.00015028961934149265, 0.00013042727368883789, 9.6540024969726801e-05, 0.000145584752317518, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[8*1*1*48] = { 
  /* [0][0][][] */ 45,98,-41,77,-2,-8,-19,9,55,-72,-3,-23,5,12,-38,-45,9,-22,35,22,-66,-33,-38,16,16,12,23,-3,14,16,-24,28,-67,6,111,-127,-19,18,-11,117,-36,19,16,2,-6,36,25,-49, 
  /* [1][0][][] */ 4,-48,33,58,-20,-16,-26,-21,39,-56,85,48,20,7,-54,-78,127,42,21,9,-83,35,38,-6,-44,-88,-39,-45,-18,-51,49,-42,-13,-25,-37,16,9,-18,87,-50,-20,24,-59,36,80,69,13,46, 
  /* [2][0][][] */ 82,-25,-3,-21,110,120,58,76,-24,-16,4,-25,-7,48,66,32,-28,-38,57,-75,-41,-53,-45,62,-98,-94,121,16,62,-71,-56,15,-127,90,120,17,-16,-3,-7,14,36,65,13,-67,-19,26,55,-53, 
  /* [3][0][][] */ 92,-45,19,-8,125,127,25,47,-33,-39,17,71,-125,38,60,14,-4,9,83,-126,-106,29,42,99,15,-31,68,37,52,-58,9,-8,-112,70,-67,-112,35,-41,77,-62,48,-86,-104,-22,-71,30,-22,72, 
  /* [4][0][][] */ 43,49,-28,-42,-17,-13,-24,-18,3,-6,-12,-17,-34,-23,69,48,-51,-18,-39,37,31,-11,-14,-3,-49,-37,-7,57,-15,10,-20,27,-36,-17,20,-127,-10,33,11,52,8,-17,-18,-22,40,3,89,-15, 
  /* [5][0][][] */ 69,62,-93,52,8,11,-6,31,-81,-54,-63,-22,35,15,38,23,34,-59,47,127,-72,-46,-52,56,39,-13,-30,73,39,33,-54,10,4,4,-64,4,1,16,-20,71,9,72,0,-40,126,24,12,-56, 
  /* [6][0][][] */ -35,-80,25,-42,-41,-49,-89,-81,-47,-67,-127,46,-53,-53,98,109,-127,5,35,-10,11,55,68,20,-6,-15,-85,103,-92,-32,46,85,12,-66,101,43,30,43,-4,-88,-18,-58,-21,10,-35,-11,-9,61, 
  /* [7][0][][] */ 67,13,-17,45,12,7,11,4,72,-15,-15,-19,53,2,-15,-15,-46,-9,-20,4,-7,-21,-25,-21,69,-127,11,0,-2,100,-15,17,-77,18,-62,-44,-8,24,31,27,13,69,-33,-11,-33,34,43,-23, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant34_scale = { 8, { 0.0070932181552052498, 0.0051355594769120216, 0.0041859312914311886, 0.0025662155821919441, 0.0063873087055981159, 0.0055431593209505081, 0.0041029509156942368, 0.0061873518861830235, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int32_t tensor_data35[48] = { -449, 8442, 187, -3467, -152, -164, 10827, 7441, -221, -5988, -107, -867, 5741, 4344, 22219, 21794, 1636, -2842, 163, 7388, 19166, 607, -1237, -1772, 3720, -760, 540, 23244, 7085, 13202, -830, 1317, -2231, -3616, -4165, -446, -99, -308, -776, 4040, 4901, 4051, -6316, 1901, 3478, -374, 8539, 590, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00011793404701165855, 0.00014882392133586109, 0.00052316108485683799, 8.0458783486392349e-05, 0.00037770881317555904, 0.00051030685426667333, 0.00010841056064236909, 0.00018604376236908138, 6.9514440838247538e-05, 0.00024682132061570883, 0.00052039523143321276, 0.00021533208200708032, 0.00024235238379333168, 0.00016511004650965333, 6.0027789004379883e-05, 5.004959530197084e-05, 8.88741051312536e-05, 0.00039628538070246577, 6.8922920036129653e-05, 0.00010551585000939667, 6.7926492192782462e-05, 0.00047096103662624955, 0.00080811855150386691, 0.00019559383508749306, 5.9766462072730064e-05, 0.00013691895583178848, 0.00011297906166873872, 0.00010212659253738821, 0.00018937811546493322, 0.00013097729242872447, 0.00034222935209982097, 0.00034198717912659049, 0.00011007933062501252, 0.00022927897225599736, 0.00010396944708190858, 8.4295686974655837e-05, 0.00023740217147860676, 0.00026749231619760394, 0.00015650250134058297, 0.00022706908930558711, 0.00010598647349979728, 0.00025903456844389439, 0.00011192133388249204, 0.00030872106435708702, 8.9606321125756949e-05, 0.00022345472825691104, 0.00012821707059629261, 0.00033671592245809734, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[1*3*3*48] = { 
  /* [0][0][][] */ -16,-83,-84,102,-84,9,-94,-83,55,54,95,-32,-14,4,-112,-81,92,-85,37,-25,-36,-115,-36,-69,86,90,-6,-105,-1,-57,61,70,44,62,53,20,79,84,42,14,-120,-8,25,42,-25,84,-43,-89, 97,-16,36,86,-127,47,-69,1,94,127,127,77,-3,-57,-126,-127,117,-30,109,-62,-127,118,127,50,127,83,45,-103,-92,-68,-98,107,96,127,75,93,-15,86,68,-68,-89,-88,0,-64,-35,127,-58,100, 116,2,48,88,-79,15,-56,-1,21,89,-4,-33,-72,-12,-43,-61,48,89,73,-9,-79,-31,-72,94,41,17,32,-58,4,-50,30,37,54,100,-1,58,-3,39,48,-6,-60,-2,-11,9,3,79,3,-8, 
  /* [0][1][][] */ 41,-127,108,115,87,-70,-127,-127,112,52,67,-44,-3,-12,-127,-92,112,127,40,-105,-37,124,31,-127,93,127,106,-123,-2,-112,-69,69,100,-5,96,51,29,82,68,0,-7,-25,69,86,-114,41,-89,102, 127,-18,9,127,119,-127,-103,-8,127,106,114,68,-21,-127,-94,-122,127,62,127,-127,-103,-127,-101,71,92,124,127,-127,-127,-127,127,127,127,5,127,127,8,127,127,-127,13,-127,98,-94,-127,92,-114,-127, 96,-3,-127,86,87,-58,-54,-5,14,49,-17,-13,-127,-3,-30,-35,49,-94,90,-43,-65,12,75,105,65,56,4,-71,-7,-86,-31,22,48,3,27,71,8,27,77,-4,-21,-6,34,-17,-88,68,-22,6, 
  /* [0][2][][] */ 66,-66,11,21,3,63,-97,-69,23,-1,6,65,7,-1,-40,-38,22,-33,11,-61,1,5,22,-85,26,26,63,-55,11,-105,17,11,61,-76,54,15,-127,15,2,-1,29,-5,105,-127,-65,-6,-67,-9, 53,0,10,38,10,89,-30,-9,15,58,31,-127,-8,-84,-25,-41,41,-5,46,-79,-24,-15,-21,49,13,39,70,-77,-78,-105,-20,8,68,-92,55,26,24,37,50,-43,127,-54,127,95,-79,-6,-127,14, -25,-5,-6,21,-19,38,-23,6,2,28,-37,50,-54,-8,-4,-4,15,31,21,5,-22,20,24,65,26,20,29,-36,1,-39,17,-11,-8,-45,12,17,13,-35,33,6,57,7,38,-19,-7,-1,-36,-10, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0050121969543397427, 0.006325016263872385, 0.022234344854950905, 0.0034194982144981623, 0.016052624210715294, 0.021688040345907211, 0.0046074488200247288, 0.0079068597406148911, 0.0029543635901063681, 0.010489906184375286, 0.022116797044873238, 0.0091516133397817612, 0.010299975983798504, 0.0070171770639717579, 0.0025511810090392828, 0.0021271076984703541, 0.0037771493662148714, 0.016842128708958626, 0.0029292239341884851, 0.0044844234362244606, 0.0028868757653981447, 0.020015843212604523, 0.034345038235187531, 0.0083127375692129135, 0.0025400745216757059, 0.0058190557174384594, 0.0048016100190579891, 0.0043403799645602703, 0.0080485697835683823, 0.0055665350519120693, 0.014544747769832611, 0.014534454792737961, 0.004678371362388134, 0.0097443563863635063, 0.0044187013991177082, 0.0035825665108859539, 0.010089592076838017, 0.011368422769010067, 0.0066513563506305218, 0.0096504362300038338, 0.0045044249854981899, 0.011008968576788902, 0.0047566564753651619, 0.013120644725859165, 0.003808268578723073, 0.009496825747191906, 0.0054492251947522163, 0.014310427010059357, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 3 };
const ALIGN(16) int32_t tensor_data37[48] = { 17725, 7562, 27720, 3023, 6528, 5781, -6989, 6976, 4066, -4136, -4556, 8194, -5072, -7685, 10879, 2352, -3046, 3599, -2603, 5021, -157, 6799, 6113, -3742, -734, -7133, 4689, -4986, 5915, 11921, 710, 723, 11948, 16127, 12226, 8227, 9226, -7232, 1300, 7214, -1362, -6913, 6764, 1785, 518, -9507, -18492, 2820, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00021296394697856158, 0.00033604877535253763, 4.4254138629185036e-05, 0.00053163367556408048, 0.00030818858067505062, 0.00034705788129940629, 0.00086273154010996222, 0.00054283003555610776, 0.00071386637864634395, 0.0003224800166208297, 8.8942382717505097e-05, 0.00026453117607161403, 0.00029315860592760146, 0.00061988859670236707, 0.00035635140375234187, 0.0011179778957739472, 0.00067517918068915606, 0.00022256055672187358, 0.00070703239180147648, 0.001049296697601676, 0.0005004518898203969, 0.00020516828226391226, 5.6804048654157668e-05, 0.00028000451857224107, 0.00067785568535327911, 0.00049600261263549328, 0.00062806648202240467, 0.00023847796546760947, 0.0005643737968057394, 0.00043255515629425645, 0.00022013339912518859, 0.00031593430321663618, 0.0004431542765814811, 0.00017488130833953619, 0.00025079940678551793, 0.00021728999854531139, 0.00030446748132817447, 0.00084007385885342956, 0.00029032817110419273, 0.00036957193515263498, 0.00095920218154788017, 0.00035885244142264128, 0.00046876724809408188, 0.00016188196605071425, 0.00078600016422569752, 0.00040816061664372683, 0.00032424100209027529, 0.00034596401383168995, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -117,-105,31,-127,-74,4,-3,-7, 
  /* [1][0][][] */ -127,-16,107,0,-48,19,6,20, 
  /* [2][0][][] */ 21,0,21,127,17,-14,-6,-14, 
  /* [3][0][][] */ -96,-64,-28,-15,36,127,-45,-29, 
  /* [4][0][][] */ -2,-29,-7,-7,-5,-1,-127,-72, 
  /* [5][0][][] */ -2,-34,-15,-5,-14,14,-127,-69, 
  /* [6][0][][] */ 127,9,20,-5,-62,22,7,-9, 
  /* [7][0][][] */ -127,-34,-11,7,77,12,2,9, 
  /* [8][0][][] */ 18,45,-7,-7,-35,-127,45,13, 
  /* [9][0][][] */ 78,26,-11,-14,-27,-9,-12,127, 
  /* [10][0][][] */ 127,-12,-126,1,-87,-12,33,119, 
  /* [11][0][][] */ -127,107,-3,-52,103,-63,14,20, 
  /* [12][0][][] */ 127,-35,-100,16,53,-5,-6,-26, 
  /* [13][0][][] */ 127,6,16,-7,-35,32,14,-14, 
  /* [14][0][][] */ -127,-70,85,-19,56,-4,-30,-120, 
  /* [15][0][][] */ 27,83,-4,-4,-15,-127,-23,13, 
  /* [16][0][][] */ -11,-63,7,2,10,127,9,8, 
  /* [17][0][][] */ 37,-127,-67,-11,-34,123,-53,-18, 
  /* [18][0][][] */ 42,-16,-17,-21,-13,26,127,-16, 
  /* [19][0][][] */ -5,20,-1,-127,-8,33,-3,-10, 
  /* [20][0][][] */ -83,-26,76,14,49,110,-10,-127, 
  /* [21][0][][] */ -18,-1,47,-14,-24,14,-127,-93, 
  /* [22][0][][] */ 95,-15,11,127,-21,-17,74,32, 
  /* [23][0][][] */ 127,-7,-127,-13,21,-29,15,0, 
  /* [24][0][][] */ -31,21,29,37,7,0,-127,-81, 
  /* [25][0][][] */ 127,12,-93,4,11,-10,3,32, 
  /* [26][0][][] */ -1,45,-36,-127,-31,19,-1,2, 
  /* [27][0][][] */ 127,28,-112,-6,-119,35,18,97, 
  /* [28][0][][] */ -127,-28,-14,19,64,10,0,33, 
  /* [29][0][][] */ -4,-123,-8,-127,-7,23,-12,-27, 
  /* [30][0][][] */ -1,77,127,24,29,-93,92,39, 
  /* [31][0][][] */ -69,-12,-127,39,5,-15,91,105, 
  /* [32][0][][] */ -2,-122,-2,-127,-14,10,-14,-13, 
  /* [33][0][][] */ 23,-116,-1,-127,11,5,0,-27, 
  /* [34][0][][] */ -28,-55,34,-84,31,-44,127,77, 
  /* [35][0][][] */ -127,4,53,2,-112,-31,30,118, 
  /* [36][0][][] */ -127,8,98,-11,-40,14,-43,48, 
  /* [37][0][][] */ 127,9,-2,-2,-69,23,5,11, 
  /* [38][0][][] */ -79,2,78,27,47,-43,36,127, 
  /* [39][0][][] */ -127,-1,77,-4,-67,9,-7,6, 
  /* [40][0][][] */ -15,29,39,-10,19,3,127,46, 
  /* [41][0][][] */ 127,-13,-71,2,58,11,7,-9, 
  /* [42][0][][] */ -8,-127,28,-13,17,-1,-7,-13, 
  /* [43][0][][] */ 2,115,127,-7,39,-75,63,9, 
  /* [44][0][][] */ 5,-19,-8,126,-3,-127,-7,8, 
  /* [45][0][][] */ 127,-33,32,-8,-54,97,11,-1, 
  /* [46][0][][] */ 8,127,-7,106,-7,121,31,44, 
  /* [47][0][][] */ -15,30,12,-27,34,-35,127,78, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0042462358251214027, 0.0067003942094743252, 0.00088237243471667171, 0.010600113309919834, 0.0061448966152966022, 0.0069199018180370331, 0.017201792448759079, 0.010823355056345463, 0.014233606867492199, 0.0064298501238226891, 0.001773400348611176, 0.0052744224667549133, 0.0058452174998819828, 0.012359807267785072, 0.0071052033454179764, 0.022291086614131927, 0.013462232425808907, 0.0044375802390277386, 0.014097345061600208, 0.020921669900417328, 0.0099783875048160553, 0.0040907999500632286, 0.0011326019885018468, 0.0055829412303864956, 0.013515598140656948, 0.0098896743729710579, 0.01252286322414875, 0.0047549535520374775, 0.011252910830080509, 0.008624611422419548, 0.0043891859240829945, 0.0062993364408612251, 0.0088359443470835686, 0.0034869154915213585, 0.0050006280653178692, 0.0043324921280145645, 0.0060707023367285728, 0.016750026494264603, 0.0057887821458280087, 0.0073688044212758541, 0.019125297665596008, 0.0071550710126757622, 0.0093466350808739662, 0.003227724926546216, 0.015671864151954651, 0.0081382142379879951, 0.0064649619162082672, 0.0068980916403234005, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[8] = { 5236, -5540, -386, 3851, 2890, 843, -4035, 4089, };
const TfArray<1, int> tensor_dimension39 = { 1, { 8 } };
const TfArray<8, float> quant39_scale = { 8, { 5.3139698138693348e-05, 0.00011907156294910237, 8.6860381998121738e-05, 4.6479839511448517e-05, 0.00010226085578324273, 0.00016844141646288335, 8.9970038970932364e-05, 0.00017214653780683875, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[8*1*1*8] = { 
  /* [0][0][][] */ -21,-8,-38,-39,-15,31,-127,-2, 
  /* [1][0][][] */ 18,87,2,127,12,-9,-10,-33, 
  /* [2][0][][] */ 127,-14,-37,-52,-57,38,97,-49, 
  /* [3][0][][] */ 5,-127,41,-78,16,-95,25,58, 
  /* [4][0][][] */ 114,5,-65,0,23,5,-127,-53, 
  /* [5][0][][] */ 5,-31,3,37,2,-127,0,11, 
  /* [6][0][][] */ 127,-37,113,-3,110,-39,-3,5, 
  /* [7][0][][] */ -127,-2,-101,-9,-96,6,32,6, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0025102929212152958, 0.0056248814798891544, 0.0041032414883375168, 0.0021956844720989466, 0.0048307520337402821, 0.0079570887610316277, 0.0042501399293541908, 0.0081321168690919876, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[8] = { -10842, 10437, 955, -11380, -1164, -13357, -4, 105, };
const TfArray<1, int> tensor_dimension41 = { 1, { 8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.00026565496227703989, 0.00034483714262023568, 0.00025260163238272071, 0.00032009210553951561, 0.00020082801347598433, 0.00034083629725500941, 0.0009278760408051312, 0.0026721584144979715, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*8] = { 
  /* [0][0][][] */ -4,4,16,17,13,2,11,36, 12,5,-37,127,-22,2,-2,33, -5,-2,-12,15,-4,0,-4,20, 
  /* [0][1][][] */ -4,3,127,-19,127,2,-108,48, 127,-127,-103,3,-90,127,-12,-127, -27,6,4,-24,-6,-4,127,47, 
  /* [0][2][][] */ -4,5,6,1,13,1,18,40, 8,7,-50,-7,-21,1,-7,-104, -4,-1,-14,-6,4,-2,-4,37, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.011290335096418858, 0.014655577950179577, 0.010735568590462208, 0.013603914529085159, 0.0085351904854178429, 0.01448554266244173, 0.039434731006622314, 0.11356672644615173, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[8] = { 19610, 13910, 1251, 34805, 2747, 12768, 57175, -3031, };
const TfArray<1, int> tensor_dimension43 = { 1, { 8 } };
const TfArray<8, float> quant43_scale = { 8, { 0.00011800246284110472, 0.00015163149510044605, 0.00015053909737616777, 7.691749488003552e-05, 0.00023509921447839588, 0.0001950792211573571, 1.4852544154564384e-05, 2.4606868464616127e-05, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[8*3*3*1] = { 
  /* [0][0][][] */ -55, 54, 12, 
  /* [0][1][][] */ -127, 126, 2, 
  /* [0][2][][] */ -41, 50, 2, 
  /* [1][0][][] */ 58, 127, 36, 
  /* [1][1][][] */ -65, -76, -42, 
  /* [1][2][][] */ 9, -39, 7, 
  /* [2][0][][] */ 29, 26, -47, 
  /* [2][1][][] */ 50, 67, -127, 
  /* [2][2][][] */ 19, 30, -59, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 75, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -54, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 6, -37, 32, 
  /* [5][0][][] */ 1, -57, 0, 
  /* [5][1][][] */ -1, 127, 1, 
  /* [5][2][][] */ 0, -76, -1, 
  /* [6][0][][] */ -14, -84, -2, 
  /* [6][1][][] */ -21, -127, -5, 
  /* [6][2][][] */ -7, -51, 2, 
  /* [7][0][][] */ 47, -127, 30, 
  /* [7][1][][] */ -18, -2, -12, 
  /* [7][2][][] */ -24, 74, -14, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant44_scale = { 8, { 0.030090626329183578, 0.038666028529405594, 0.038387466222047806, 0.019613960757851601, 0.059950295835733414, 0.049745198339223862, 0.0037873985711485147, 0.0062747509218752384, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.021168723702430725, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.035404320806264877, } };
const TfArray<1, int> quant47_zero = { 1, { 41 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant48_scale = { 1, { 0.050153583288192749, } };
const TfArray<1, int> quant48_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.031141800805926323, } };
const TfArray<1, int> quant52_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.015248210169374943, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant54_scale = { 1, { 0.017010634765028954, } };
const TfArray<1, int> quant54_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.062075186520814896, } };
const TfArray<1, int> quant55_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.067528747022151947, } };
const TfArray<1, int> quant56_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.013621889986097813, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.013621889986097813, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022138986736536026, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant60_scale = { 1, { 0.034690607339143753, } };
const TfArray<1, int> quant60_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.013288678601384163, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant62_scale = { 1, { 0.021865041926503181, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.03267291933298111, } };
const TfArray<1, int> quant63_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant64_scale = { 1, { 0.044739238917827606, } };
const TfArray<1, int> quant64_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.014916576445102692, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant66_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.034235883504152298, } };
const TfArray<1, int> quant67_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant68_scale = { 1, { 0.053845584392547607, } };
const TfArray<1, int> quant68_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant69_scale = { 1, { 0.014322938397526741, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,8,8,32 } };
const TfArray<1, float> quant70_scale = { 1, { 0.02336728572845459, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,8,8,5 } };
const TfArray<1, float> quant71_scale = { 1, { 0.044331829994916916, } };
const TfArray<1, int> quant71_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,8,8,5 } };
const TfArray<1, float> quant72_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,44,43 } };
const TfArray<1, int> outputs0 = { 1, { 45 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 45,42,41 } };
const TfArray<1, int> outputs1 = { 1, { 46 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 46,40,39 } };
const TfArray<1, int> outputs2 = { 1, { 47 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 45,47 } };
const TfArray<1, int> outputs3 = { 1, { 48 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 48,38,37 } };
const TfArray<1, int> outputs4 = { 1, { 49 } };
const TfArray<2, int> inputs5 = { 2, { 49,1 } };
const TfArray<1, int> outputs5 = { 1, { 50 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 50,36,35 } };
const TfArray<1, int> outputs6 = { 1, { 51 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 51,34,33 } };
const TfArray<1, int> outputs7 = { 1, { 52 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 52,32,31 } };
const TfArray<1, int> outputs8 = { 1, { 53 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 53,30,29 } };
const TfArray<1, int> outputs9 = { 1, { 54 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 54,28,27 } };
const TfArray<1, int> outputs10 = { 1, { 55 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 52,55 } };
const TfArray<1, int> outputs11 = { 1, { 56 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 56,26,25 } };
const TfArray<1, int> outputs12 = { 1, { 57 } };
const TfArray<2, int> inputs13 = { 2, { 57,2 } };
const TfArray<1, int> outputs13 = { 1, { 58 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 58,24,23 } };
const TfArray<1, int> outputs14 = { 1, { 59 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 59,22,21 } };
const TfArray<1, int> outputs15 = { 1, { 60 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 60,20,19 } };
const TfArray<1, int> outputs16 = { 1, { 61 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 61,18,17 } };
const TfArray<1, int> outputs17 = { 1, { 62 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 62,16,15 } };
const TfArray<1, int> outputs18 = { 1, { 63 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 60,63 } };
const TfArray<1, int> outputs19 = { 1, { 64 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 64,14,13 } };
const TfArray<1, int> outputs20 = { 1, { 65 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 65,12,11 } };
const TfArray<1, int> outputs21 = { 1, { 66 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 66,10,9 } };
const TfArray<1, int> outputs22 = { 1, { 67 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 64,67 } };
const TfArray<1, int> outputs23 = { 1, { 68 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 68,8,7 } };
const TfArray<1, int> outputs24 = { 1, { 69 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 69,6,5 } };
const TfArray<1, int> outputs25 = { 1, { 70 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 70,4,3 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 71 } };
const TfArray<1, int> outputs27 = { 1, { 72 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension45, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension46, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7200), (TfLiteIntArray*)&g0::tensor_dimension47, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension51, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension52, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10800), (TfLiteIntArray*)&g0::tensor_dimension53, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10800), (TfLiteIntArray*)&g0::tensor_dimension55, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension59, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7520), (TfLiteIntArray*)&g0::tensor_dimension60, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension61, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension62, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension63, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7008), (TfLiteIntArray*)&g0::tensor_dimension64, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension65, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension66, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3584), (TfLiteIntArray*)&g0::tensor_dimension67, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension68, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension70, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 320), (TfLiteIntArray*)&g0::tensor_dimension71, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension72, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 73, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  72, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 73;
  for (size_t i = 0; i < 73; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
